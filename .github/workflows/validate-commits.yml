name: Validate Commit Messages

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/config-conventional @commitlint/cli

      - name: Validate current commit (last commit)
        if: github.event_name == 'push'
        run: npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: Validate PR commits
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Comment PR if validation fails
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Commit message validation failed!**
              
              Please ensure your commit messages follow the [Conventional Commits](https://www.conventionalcommits.org/) format.
              
              See our [commit guidelines](./CONVENTIONAL_COMMITS.md) for more details.
              
              **Format:** \`type(scope): description\`
              
              **Examples:**
              - \`feat: add new scanning feature\`
              - \`fix: resolve printer connection issue\`
              - \`docs: update installation guide\`
              
              **Types:** feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert`
            })
