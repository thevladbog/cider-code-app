name: Release

on:
  push:
    branches:
      - release-beta
      - release-stable

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "=== Syncing package-lock.json with new optional dependencies ==="
          npm run sync-deps
          echo "=== Installing dependencies for test stage ==="
          npm ci

      - name: Run linter
        run: npm run lint

      - name: Run prettier check
        run: npm run prettier
  release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "=== Syncing package-lock.json with new optional dependencies ==="
          npm run sync-deps
          echo "=== Installing dependencies for release stage ==="
          npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Starting semantic-release ==="
          echo "Current branch: $(git branch --show-current)"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"

          # –ó–∞–ø—É—Å–∫–∞–µ–º semantic-release –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥
          set +e
          output=$(npm run semantic-release 2>&1)
          exit_code=$?
          set -e

          echo "$output"

          echo "=== Semantic-release completed with exit code: $exit_code ==="

          # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ semantic-release –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ
          new_release_published="false"
          new_release_version=""
          new_release_tag=""

          if echo "$output" | grep -q "Published release"; then
            new_release_published="true"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "Published release 1.0.0-beta.10 on beta channel"
            new_release_version=$(echo "$output" | grep "Published release" | sed -n 's/.*Published release \([^ ]*\) on.*/\1/p')
            new_release_tag="v${new_release_version}"
            echo "‚úÖ New release detected: $new_release_version"
          elif echo "$output" | grep -q "Created tag"; then
            new_release_published="true"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "Created tag v1.0.0-beta.10"
            new_release_tag=$(echo "$output" | grep "Created tag" | sed -n 's/.*Created tag \([^ ]*\).*/\1/p')
            new_release_version=$(echo "$new_release_tag" | sed 's/^v//')
            echo "‚úÖ New release tag detected: $new_release_tag"
          else
            echo "‚ÑπÔ∏è  No new release was published"
          fi

          echo "=== Release Information ==="
          echo "Published: $new_release_published"
          echo "Version: $new_release_version"
          echo "Tag: $new_release_tag"

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º outputs –¥–ª—è GitHub Actions
          echo "new_release_published=$new_release_published" >> $GITHUB_OUTPUT
          echo "new_release_version=$new_release_version" >> $GITHUB_OUTPUT
          echo "new_release_git_tag=$new_release_tag" >> $GITHUB_OUTPUT

          echo "=== Outputs configured ==="

      - name: Format code after release
        run: |
          echo "=== Running prettier:fix after semantic-release ==="
          npm run prettier:fix
          echo "=== Prettier formatting completed ==="

      - name: Commit formatting changes
        run: |
          echo "=== Checking for formatting changes ==="

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ No formatting changes needed"
          else
            echo "üìù Formatting changes detected, committing..."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            echo "=== Changed files ==="
            git diff --name-only
            echo "=== Diff summary ==="
            git diff --stat
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            git config --local user.name "github-actions[bot]"
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            git add .
            git commit -m "fix(style): auto-format code after release [skip ci]"
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
            echo "üöÄ Pushing formatting changes..."
            for attempt in 1 2 3; do
              if git push origin HEAD:${{ github.ref_name }}; then
                echo "‚úÖ Formatting changes committed and pushed (attempt $attempt)"
                break
              else
                echo "‚ùå Push attempt $attempt failed"
                if [ $attempt -eq 3 ]; then
                  echo "üí• Failed to push after 3 attempts"
                  echo "‚ö†Ô∏è  Continuing workflow without pushing formatting changes"
                else
                  echo "üîÑ Retrying in 5 seconds..."
                  sleep 5
                  # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  git pull --rebase origin ${{ github.ref_name }} || true
                fi
              fi
            done
          fi

  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Debug release outputs
        run: |
          echo "=== Release Job Outputs ==="
          echo "released: ${{ needs.release.outputs.released }}"
          echo "version: ${{ needs.release.outputs.version }}"
          echo "tag: ${{ needs.release.outputs.tag }}"
          echo "=== Build Job Info ==="
          echo "OS: ${{ matrix.os }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=== Environment Configuration ==="
          echo "VITE_APP_ENV will be: ${{ github.ref_name == 'release-beta' && 'beta' || 'production' }}"
          echo "APP_INSTANCE_ID pattern: bottle-code-app-{type}-{version}-{os}"
          echo "Release type: ${{ github.ref_name == 'release-beta' && 'beta' || 'prod' }}"
          echo "Version: ${{ needs.release.outputs.version || 'dev' }}"
          echo "OS suffix: ${{ matrix.os == 'windows-latest' && 'win' || (matrix.os == 'ubuntu-latest' && 'linux' || 'macos') }}"
          echo "Final APP_INSTANCE_ID will be: bottle-code-app-${{ github.ref_name == 'release-beta' && 'beta' || 'prod' }}-${{ needs.release.outputs.version || 'dev' }}-${{ matrix.os == 'windows-latest' && 'win' || (matrix.os == 'ubuntu-latest' && 'linux' || 'macos') }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "=== Syncing package-lock.json with new optional dependencies ==="
          npm run sync-deps
          echo "=== Installing dependencies for macOS ==="
          npm ci
          echo "=== Verifying Rollup installation ==="
          ls -la node_modules/@rollup/ || echo "Rollup modules not found"

      - name: Verify Rollup binaries (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "=== Verifying Rollup binaries installation ==="
          ARCH=$(uname -m)
          echo "Detected architecture: $ARCH"

          echo "=== Available Rollup binaries ==="
          ls -la node_modules/@rollup/ || echo "No Rollup binaries found"

          if [ "$ARCH" = "arm64" ]; then
            if [ -d "node_modules/@rollup/rollup-darwin-arm64" ]; then
              echo "‚úÖ ARM64 Rollup binary found"
            else
              echo "‚ùå ARM64 Rollup binary missing, installing..."
              npm install @rollup/rollup-darwin-arm64 --save-optional
            fi
          else
            if [ -d "node_modules/@rollup/rollup-darwin-x64" ]; then
              echo "‚úÖ x64 Rollup binary found"
            else
              echo "‚ùå x64 Rollup binary missing, installing..."
              npm install @rollup/rollup-darwin-x64 --save-optional
            fi
          fi

          echo "=== Final binary verification ==="
          ls -la node_modules/@rollup/ || echo "Still missing Rollup binaries"

      - name: Install dependencies
        if: matrix.os != 'macos-latest'
        run: |
          echo "=== Syncing package-lock.json with new optional dependencies ==="
          npm run sync-deps
          echo "=== Installing dependencies ==="
          npm ci

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build application (Windows)
        if: matrix.os == 'windows-latest'
        env:
          TARGET_PLATFORM: win32
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Environment variables based on branch
          NODE_ENV: production
          VITE_APP_ENV: ${{ github.ref_name == 'release-beta' && 'beta' || 'production' }}
          # Yandex Cloud Logging secrets
          YANDEX_CLOUD_LOGGING_ENABLED: true
          YANDEX_USE_SDK: true
          YANDEX_SERVICE_ACCOUNT_KEY: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_SERVICE_ACCOUNT_KEY_BETA || secrets.YANDEX_SERVICE_ACCOUNT_KEY_PRODUCTION }}
          YANDEX_FOLDER_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_FOLDER_ID_BETA || secrets.YANDEX_FOLDER_ID_PRODUCTION }}
          YANDEX_LOG_GROUP_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_LOG_GROUP_ID_BETA || secrets.YANDEX_LOG_GROUP_ID_PRODUCTION }}
          APP_INSTANCE_ID: bottle-code-app-${{ github.ref_name == 'release-beta' && 'beta' || 'prod' }}-${{ needs.release.outputs.version || 'dev' }}-win
        run: npm run make:win

      - name: Build application (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          TARGET_PLATFORM: linux
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Environment variables based on branch
          NODE_ENV: production
          VITE_APP_ENV: ${{ github.ref_name == 'release-beta' && 'beta' || 'production' }}
          # Yandex Cloud Logging secrets
          YANDEX_CLOUD_LOGGING_ENABLED: true
          YANDEX_USE_SDK: true
          YANDEX_SERVICE_ACCOUNT_KEY: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_SERVICE_ACCOUNT_KEY_BETA || secrets.YANDEX_SERVICE_ACCOUNT_KEY_PRODUCTION }}
          YANDEX_FOLDER_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_FOLDER_ID_BETA || secrets.YANDEX_FOLDER_ID_PRODUCTION }}
          YANDEX_LOG_GROUP_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_LOG_GROUP_ID_BETA || secrets.YANDEX_LOG_GROUP_ID_PRODUCTION }}
          APP_INSTANCE_ID: bottle-code-app-${{ github.ref_name == 'release-beta' && 'beta' || 'prod' }}-${{ needs.release.outputs.version || 'dev' }}-linux
        run: npm run make:linux

      - name: Build application (macOS)
        if: matrix.os == 'macos-latest'
        env:
          TARGET_PLATFORM: darwin
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Environment variables based on branch
          NODE_ENV: production
          VITE_APP_ENV: ${{ github.ref_name == 'release-beta' && 'beta' || 'production' }}
          # Yandex Cloud Logging secrets
          YANDEX_CLOUD_LOGGING_ENABLED: true
          YANDEX_USE_SDK: true
          YANDEX_SERVICE_ACCOUNT_KEY: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_SERVICE_ACCOUNT_KEY_BETA || secrets.YANDEX_SERVICE_ACCOUNT_KEY_PRODUCTION }}
          YANDEX_FOLDER_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_FOLDER_ID_BETA || secrets.YANDEX_FOLDER_ID_PRODUCTION }}
          YANDEX_LOG_GROUP_ID: ${{ github.ref_name == 'release-beta' && secrets.YANDEX_LOG_GROUP_ID_BETA || secrets.YANDEX_LOG_GROUP_ID_PRODUCTION }}
          APP_INSTANCE_ID: bottle-code-app-${{ github.ref_name == 'release-beta' && 'beta' || 'prod' }}-${{ needs.release.outputs.version || 'dev' }}-macos
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
          npm_config_target_platform: darwin
          npm_config_cache: ~/.npm
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è npm
          npm_config_target_arch: ${{ runner.arch == 'X64' && 'x64' || 'arm64' }}
        run: |
          echo "=== Pre-build verification for macOS ==="
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Platform: $(uname -a)"
          echo "Architecture: $(uname -m)"
          echo "Runner architecture: ${{ runner.arch }}"
          echo "=== Checking Rollup installation ==="
          ls -la node_modules/@rollup/ || echo "Rollup modules not found"
          find node_modules -name "*rollup*" -type d || echo "No rollup directories found"
          echo "=== Building application with multiple fallback strategies ==="

          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û–±—ã—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
          if npm run make:mac; then
            echo "‚úÖ Build succeeded with npm"
          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: npm —Å force install
          elif (echo "‚ùå Build failed, trying npm with force install" && rm -rf node_modules && npm cache clean --force && npm install --force && npm run make:mac); then
            echo "‚úÖ Build succeeded with npm force install"
          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: npm —Å legacy-peer-deps
          elif (echo "‚ùå Build failed with npm force, trying with legacy-peer-deps" && rm -rf node_modules package-lock.json && npm install --legacy-peer-deps && npm run make:mac); then
            echo "‚úÖ Build succeeded with npm legacy-peer-deps"
          else
            echo "üí• All build strategies failed"            exit 1
          fi

      - name: Publish to GitHub Releases (Windows)
        if: matrix.os == 'windows-latest' && needs.release.outputs.released == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish:win

      - name: Publish to GitHub Releases (Linux)
        if: matrix.os == 'ubuntu-latest' && needs.release.outputs.released == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish:linux

      - name: Publish to GitHub Releases (macOS)
        if: matrix.os == 'macos-latest' && needs.release.outputs.released == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish:mac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-app-${{ matrix.os }}
          path: |
            dist_electron/**/*
            !dist_electron/**/*.blockmap
            !dist_electron/**/*.yml
            !dist_electron/**/*.yaml

      - name: Upload distributable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributables-${{ matrix.os }}
          path: |
            dist_electron/*.exe
            dist_electron/*.zip
            dist_electron/*.deb
            dist_electron/*.rpm
            dist_electron/*.dmg
            dist_electron/*.nupkg
            dist_electron/*.AppImage
          if-no-files-found: warn
  publish:
    needs: [release, build]
    runs-on: ubuntu-latest
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Check if release was created
        run: |
          echo "=== Checking release status ==="
          echo "released: ${{ needs.release.outputs.released }}"
          echo "version: ${{ needs.release.outputs.version }}"
          echo "tag: ${{ needs.release.outputs.tag }}"

          if [ "${{ needs.release.outputs.released }}" != "true" ]; then
            echo "‚ö†Ô∏è  No new release was created, skipping asset upload"
            exit 0
          fi

          echo "‚úÖ Release was created, proceeding with asset upload"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: distributables-*
          merge-multiple: true
          path: ./distributables

      - name: Display downloaded files (detailed)
        run: |
          echo "=== Downloaded artifacts structure ==="
          find ./distributables -type f | sort
          echo ""
          echo "=== File sizes ==="
          find ./distributables -type f -exec ls -lh {} \; | awk '{print $5 "\t" $9}'
          echo ""
          echo "=== Target distributables ==="
          find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" -o -name "*.AppImage" \) | sort
          echo ""
          echo "=== Testing file access ==="
          find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" -o -name "*.AppImage" \) -print0 | while IFS= read -r -d '' file; do
            if [ -f "$file" ]; then
              echo "‚úÖ File exists: $(basename "$file")"
              echo "   Path: $file"
              echo "   Size: $(du -h "$file" | cut -f1)"
            else
              echo "‚ùå File missing: $file"
            fi
          done

      - name: Verify release information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Release Information ==="
          echo "Tag from semantic-release: ${{ needs.release.outputs.tag }}"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Released: ${{ needs.release.outputs.released }}"
          echo ""
          echo "=== Latest GitHub Release ==="
          gh release view --repo ${{ github.repository }} --json tagName,name,publishedAt,assets || echo "No release found"
          echo ""
          echo "=== All Releases (latest 3) ==="
          gh release list --repo ${{ github.repository }} --limit 3

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${{ needs.release.outputs.tag }}"
          echo "=== Starting asset upload ==="
          echo "Target release tag: $tag_name"

          if [ -z "$tag_name" ]; then
            echo "‚ùå No tag name found, cannot upload assets"
            echo "Available outputs from release job:"
            echo "  tag: ${{ needs.release.outputs.tag }}"
            echo "  version: ${{ needs.release.outputs.version }}"
            echo "  released: ${{ needs.release.outputs.released }}"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
          files_to_upload=$(find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" -o -name "*.AppImage" \))
          files_count=$(echo "$files_to_upload" | wc -l)

          echo "=== Upload Summary ==="
          echo "Files to upload: $files_count"

          if [ "$files_count" -eq 0 ] || [ -z "$files_to_upload" ]; then
            echo "‚ùå No distributable files found to upload"
            echo "Directory contents:"
            ls -la ./distributables/ || echo "Directory does not exist"
            exit 1
          fi

          echo "=== Files to upload ==="
          echo "$files_to_upload" | while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "üì¶ $(basename "$file") ($(du -h "$file" | cut -f1))"
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
          echo ""
          echo "=== Verifying release exists ==="
          if gh release view "$tag_name" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "‚úÖ Release $tag_name exists"
          else
            echo "‚ùå Release $tag_name not found"
            echo "Creating release..."
            gh release create "$tag_name" --repo ${{ github.repository }} --title "Release $tag_name" --notes "Automated release" || {
              echo "Failed to create release"
              exit 1
            }          fi

          # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ –≤ —Ä–µ–ª–∏–∑
          echo ""
          echo "=== Starting file uploads ==="

          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—Ö–∞
          upload_success_file=$(mktemp)
          echo "true" > "$upload_success_file"          # –ò—Å–ø–æ–ª—å–∑—É–µ–º find —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
          find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" -o -name "*.AppImage" \) -print0 | while IFS= read -r -d '' file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "üöÄ Uploading: $filename"
              echo "   Full path: $file"
              # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
              upload_failed=false
              for attempt in 1 2 3; do
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                export UPLOAD_FILE="$file"
                if gh release upload "$tag_name" "$UPLOAD_FILE" --repo ${{ github.repository }} --clobber; then
                  echo "‚úÖ Successfully uploaded: $filename"
                  break
                else
                  echo "‚ùå Upload attempt $attempt failed for: $filename"
                  if [ $attempt -eq 3 ]; then
                    echo "üí• Failed to upload $filename after 3 attempts"
                    upload_failed=true
                    echo "false" > "$upload_success_file"
                  else
                    echo "üîÑ Retrying in 5 seconds..."
                    sleep 5
                  fi
                fi
              done
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
          upload_success=$(cat "$upload_success_file")
          rm "$upload_success_file"

          if [ "$upload_success" = true ]; then
            echo ""
            echo "üéâ All assets uploaded successfully to release $tag_name"
            echo "=== Final release info ==="
            gh release view "$tag_name" --repo ${{ github.repository }} --json tagName,name,assets
          else
            echo ""
            echo "üí• Some uploads failed"
            exit 1
          fi
