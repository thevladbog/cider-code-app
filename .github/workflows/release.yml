name: Release

on:
  push:
    branches:
      - release-beta
      - release-stable

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run prettier check
        run: npm run prettier

  release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Starting semantic-release ==="
          npm run semantic-release
          echo "=== Semantic-release completed ==="

          # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ semantic-release
          echo "=== Checking environment variables ==="
          echo "NEW_RELEASE_PUBLISHED=${NEW_RELEASE_PUBLISHED:-false}"
          echo "NEW_RELEASE_VERSION=${NEW_RELEASE_VERSION:-}"
          echo "NEW_RELEASE_GIT_TAG=${NEW_RELEASE_GIT_TAG:-}"

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º outputs –¥–ª—è GitHub Actions
          echo "new_release_published=${NEW_RELEASE_PUBLISHED:-false}" >> $GITHUB_OUTPUT
          echo "new_release_version=${NEW_RELEASE_VERSION:-}" >> $GITHUB_OUTPUT
          echo "new_release_git_tag=${NEW_RELEASE_GIT_TAG:-}" >> $GITHUB_OUTPUT

          echo "=== Outputs set ==="
          echo "Released: ${NEW_RELEASE_PUBLISHED:-false}"
          echo "Version: ${NEW_RELEASE_VERSION:-}"
          echo "Tag: ${NEW_RELEASE_GIT_TAG:-}"

      - name: Format code after release
        run: |
          echo "=== Running prettier:fix after semantic-release ==="
          npm run prettier:fix
          echo "=== Prettier formatting completed ==="

      - name: Commit formatting changes
        run: |
          echo "=== Checking for formatting changes ==="

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ No formatting changes needed"
          else
            echo "üìù Formatting changes detected, committing..."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            echo "=== Changed files ==="
            git diff --name-only
            echo "=== Diff summary ==="
            git diff --stat
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            git config --local user.name "github-actions[bot]"
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            git add .
            git commit -m "style: auto-format code after release [skip ci]"
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
            echo "üöÄ Pushing formatting changes..."
            for attempt in 1 2 3; do
              if git push origin HEAD:${{ github.ref_name }}; then
                echo "‚úÖ Formatting changes committed and pushed (attempt $attempt)"
                break
              else
                echo "‚ùå Push attempt $attempt failed"
                if [ $attempt -eq 3 ]; then
                  echo "üí• Failed to push after 3 attempts"
                  echo "‚ö†Ô∏è  Continuing workflow without pushing formatting changes"
                else
                  echo "üîÑ Retrying in 5 seconds..."
                  sleep 5
                  # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  git pull --rebase origin ${{ github.ref_name }} || true
                fi
              fi
            done
          fi

  build:
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Debug release outputs
        run: |
          echo "=== Release Job Outputs ==="
          echo "released: ${{ needs.release.outputs.released }}"
          echo "version: ${{ needs.release.outputs.version }}"
          echo "tag: ${{ needs.release.outputs.tag }}"
          echo "=== Build Job Info ==="
          echo "OS: ${{ matrix.os }}"
          echo "Event: ${{ github.event_name }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libusb-1.0-0-dev

      - name: Build application (Windows)
        if: matrix.os == 'windows-latest'
        env:
          TARGET_PLATFORM: win32
        run: npm run make:win

      - name: Build application (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          TARGET_PLATFORM: linux
        run: npm run make:linux

      - name: Build application (macOS)
        if: matrix.os == 'macos-latest'
        env:
          TARGET_PLATFORM: darwin
        run: npm run make:mac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-app-${{ matrix.os }}
          path: |
            out/make/**/*
            !out/make/**/*.zip
            !out/make/**/*.deb
            !out/make/**/*.rpm
            !out/make/**/*.dmg
            !out/make/**/*.exe

      - name: Upload distributable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributables-${{ matrix.os }}
          path: |
            out/make/**/**.zip
            out/make/**/**.deb
            out/make/**/**.rpm
            out/make/**/**.dmg
            out/make/**/**.exe
            out/make/**/**.nupkg
          if-no-files-found: warn
  publish:
    needs: [release, build]
    runs-on: ubuntu-latest
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Check if release was created
        run: |
          echo "=== Checking release status ==="
          echo "released: ${{ needs.release.outputs.released }}"
          echo "version: ${{ needs.release.outputs.version }}"
          echo "tag: ${{ needs.release.outputs.tag }}"

          if [ "${{ needs.release.outputs.released }}" != "true" ]; then
            echo "‚ö†Ô∏è  No new release was created, skipping asset upload"
            exit 0
          fi

          echo "‚úÖ Release was created, proceeding with asset upload"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: distributables-*
          merge-multiple: true
          path: ./distributables

      - name: Display downloaded files (detailed)
        run: |
          echo "=== Downloaded artifacts structure ==="
          find ./distributables -type f | sort
          echo ""
          echo "=== File sizes ==="
          find ./distributables -type f -exec ls -lh {} \; | awk '{print $5 "\t" $9}'
          echo ""
          echo "=== Target distributables ==="
          find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" \) | sort

      - name: Verify release information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Release Information ==="
          echo "Tag from semantic-release: ${{ needs.release.outputs.tag }}"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Released: ${{ needs.release.outputs.released }}"
          echo ""
          echo "=== Latest GitHub Release ==="
          gh release view --repo ${{ github.repository }} --json tagName,name,publishedAt,assets || echo "No release found"
          echo ""
          echo "=== All Releases (latest 3) ==="
          gh release list --repo ${{ github.repository }} --limit 3

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${{ needs.release.outputs.tag }}"
          echo "=== Starting asset upload ==="
          echo "Target release tag: $tag_name"

          if [ -z "$tag_name" ]; then
            echo "‚ùå No tag name found, cannot upload assets"
            echo "Available outputs from release job:"
            echo "  tag: ${{ needs.release.outputs.tag }}"
            echo "  version: ${{ needs.release.outputs.version }}"
            echo "  released: ${{ needs.release.outputs.released }}"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
          files_to_upload=$(find ./distributables -type f \( -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" -o -name "*.nupkg" \))
          files_count=$(echo "$files_to_upload" | wc -l)

          echo "=== Upload Summary ==="
          echo "Files to upload: $files_count"

          if [ "$files_count" -eq 0 ] || [ -z "$files_to_upload" ]; then
            echo "‚ùå No distributable files found to upload"
            echo "Directory contents:"
            ls -la ./distributables/ || echo "Directory does not exist"
            exit 1
          fi

          echo "=== Files to upload ==="
          echo "$files_to_upload" | while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "üì¶ $(basename "$file") ($(du -h "$file" | cut -f1))"
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
          echo ""
          echo "=== Verifying release exists ==="
          if gh release view "$tag_name" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "‚úÖ Release $tag_name exists"
          else
            echo "‚ùå Release $tag_name not found"
            echo "Creating release..."
            gh release create "$tag_name" --repo ${{ github.repository }} --title "Release $tag_name" --notes "Automated release" || {
              echo "Failed to create release"
              exit 1
            }
          fi

          # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤ –≤ —Ä–µ–ª–∏–∑
          echo ""
          echo "=== Starting file uploads ==="
          upload_success=true

          echo "$files_to_upload" | while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "üöÄ Uploading: $filename"
              
              # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
              for attempt in 1 2 3; do
                if gh release upload "$tag_name" "$file" --repo ${{ github.repository }} --clobber; then
                  echo "‚úÖ Successfully uploaded: $filename"
                  break
                else
                  echo "‚ùå Upload attempt $attempt failed for: $filename"
                  if [ $attempt -eq 3 ]; then
                    echo "üí• Failed to upload $filename after 3 attempts"
                    upload_success=false
                  else
                    echo "üîÑ Retrying in 5 seconds..."
                    sleep 5
                  fi
                fi
              done
            fi
          done

          if [ "$upload_success" = true ]; then
            echo ""
            echo "üéâ All assets uploaded successfully to release $tag_name"
            echo "=== Final release info ==="
            gh release view "$tag_name" --repo ${{ github.repository }} --json tagName,name,assets
          else
            echo ""
            echo "üí• Some uploads failed"
            exit 1
          fi
