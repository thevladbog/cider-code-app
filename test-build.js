#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function runCommand(command, description) {
  console.log(`\nüîÑ ${description}`);
  console.log(`Executing: ${command}`);
  try {
    const output = execSync(command, {
      stdio: 'inherit',
      cwd: __dirname,
      encoding: 'utf8',
    });
    console.log(`‚úÖ ${description} - SUCCESS`);
    return output;
  } catch (error) {
    console.error(`‚ùå ${description} - FAILED`);
    console.error(error.message);
    process.exit(1);
  }
}

function checkOutputDirectory() {
  const outDir = path.join(__dirname, 'out');
  const makeDir = path.join(outDir, 'make');

  console.log('\nüìÅ Checking output directory structure...');

  if (!fs.existsSync(outDir)) {
    console.log('‚ùå Output directory does not exist');
    return;
  }

  if (!fs.existsSync(makeDir)) {
    console.log('‚ùå Make directory does not exist');
    return;
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  function walkDir(dir, indent = '') {
    const items = fs.readdirSync(dir);
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        console.log(`${indent}üìÅ ${item}/`);
        walkDir(fullPath, indent + '  ');
      } else {
        const size = (stat.size / 1024 / 1024).toFixed(2);
        console.log(`${indent}üìÑ ${item} (${size} MB)`);
      }
    });
  }

  console.log('üìÅ out/');
  walkDir(outDir, '  ');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
  const distributables = [];
  function findDistributables(dir) {
    const items = fs.readdirSync(dir);
    items.forEach(item => {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        findDistributables(fullPath);
      } else {
        const ext = path.extname(item).toLowerCase();
        if (['.zip', '.exe', '.deb', '.rpm', '.dmg', '.nupkg'].includes(ext)) {
          distributables.push(fullPath);
        }
      }
    });
  }

  findDistributables(makeDir);

  console.log('\nüì¶ Found distributables:');
  if (distributables.length === 0) {
    console.log('‚ùå No distributable files found!');
  } else {
    distributables.forEach(file => {
      const relativePath = path.relative(__dirname, file);
      const size = (fs.statSync(file).size / 1024 / 1024).toFixed(2);
      console.log(`‚úÖ ${relativePath} (${size} MB)`);
    });
  }
}

console.log('üöÄ Starting build test...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
const platform = process.platform;
console.log(`üìã Platform: ${platform}`);

// –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±–æ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
let buildCommand;
switch (platform) {
  case 'win32':
    buildCommand = 'npm run make:win';
    break;
  case 'linux':
    buildCommand = 'npm run make:linux';
    break;
  case 'darwin':
    buildCommand = 'npm run make:mac';
    break;
  default:
    console.log('‚ùå Unsupported platform');
    process.exit(1);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
runCommand('npm ci', 'Installing dependencies');

// –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
runCommand(buildCommand, `Building application for ${platform}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
checkOutputDirectory();

console.log('\nüéâ Build test completed successfully!');
