/**
 * –¢–µ—Å—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É VITE_APP_ENV –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –∞ –Ω–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined' || typeof process === 'undefined' || !process.versions?.node) {
  console.error(
    'This test file can only run in Node.js environment, not in browser/renderer context'
  );
  console.log('To run this test, use: npx tsx src/services/testEnvironmentUnified.ts');
  throw new Error('Node.js environment required');
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try {
  require('dotenv').config();
} catch {
  console.log('dotenv not available, using system environment variables');
}

import { getAppEnvironment, getEnvironmentConfig, logEnvironmentInfo } from '../utils/environment';
import { createSDKLoggerConfig } from './loggerConfig';
import { YandexCloudLoggerSDK } from './yandexCloudLoggerSDK';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const loggerConfig = createSDKLoggerConfig();
const logger = new YandexCloudLoggerSDK(loggerConfig);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runEnvironmentTest() {
  console.log('=== ENVIRONMENT UNIFIED TEST ===');
  console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');

  if (process.env.YANDEX_SERVICE_ACCOUNT_KEY) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Service Account Key (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
  } else if (process.env.YANDEX_IAM_TOKEN) {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IAM —Ç–æ–∫–µ–Ω (–º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Service Account Key –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã');
  } else if (process.env.YANDEX_OAUTH_TOKEN) {
    console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OAuth —Ç–æ–∫–µ–Ω');
  } else {
    console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log(
      '   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: YANDEX_SERVICE_ACCOUNT_KEY, YANDEX_IAM_TOKEN, –∏–ª–∏ YANDEX_OAUTH_TOKEN'
    );
  }

  console.log('');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  try {
    await logger.initialize();
    console.log('‚úÖ –õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞:', error);
    if (error instanceof Error && error.message.includes('expired')) {
      console.log('');
      console.log('üîß –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–¢–ï–ß–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê:');
      console.log('1. –ü–æ–ª—É—á–∏—Ç–µ Service Account Key –∏–∑ Yandex Cloud Console');
      console.log(
        '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY —Å JSON —Å–æ–¥–µ—Ä–∂–∏–º—ã–º'
      );
      console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      console.log('');
      console.log('Service Account Key –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    }
    return;
  }

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const environment = getAppEnvironment();
  console.log('üåç Current environment:', environment);

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envConfig = getEnvironmentConfig();
  console.log('‚öôÔ∏è Environment config:', {
    environment: envConfig.environment,
    apiUrl: envConfig.apiUrl,
    enableCloudLogging: envConfig.enableCloudLogging,
    enableDetailedLogging: envConfig.enableDetailedLogging,
    enableDebugMode: envConfig.enableDebugMode,
  });

  // 3. –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
  logEnvironmentInfo();

  // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä —Å environment
  await logger.info('Environment unified test started', {
    testType: 'environment-unified',
    currentEnvironment: environment,
    apiUrl: envConfig.apiUrl,
    timestamp: new Date().toISOString(),
  });

  // 5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≥–≥–µ—Ä–∞
  console.log('üîß –°—Ç–∞—Ç—É—Å –ª–æ–≥–≥–µ—Ä–∞:');
  const loggerStatus = logger.getStatus();
  console.log('- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', loggerStatus.isInitialized);
  console.log('- –ú–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', loggerStatus.authMethod);
  console.log('- –û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ:', loggerStatus.canAttemptCloudLogging);
  console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', loggerStatus.authRetryCount);
  if (loggerStatus.isCloudLoggingDisabled) {
    console.log('‚ö†Ô∏è  –û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
    console.log('- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏:', loggerStatus.lastFailureTime);
  }
  console.log('');

  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
  console.log('üîç Environment variables check:');
  console.log('- process.env.NODE_ENV:', process.env.NODE_ENV);
  console.log('- process.env.VITE_APP_ENV:', process.env.VITE_APP_ENV);
  console.log('- process.env.APP_ENVIRONMENT:', process.env.APP_ENVIRONMENT);

  // –í Vite environment
  try {
    interface ViteImportMeta extends ImportMeta {
      env?: {
        VITE_APP_ENV?: string;
        DEV?: boolean;
        PROD?: boolean;
      };
    }

    if (typeof import.meta !== 'undefined' && (import.meta as ViteImportMeta).env) {
      const viteEnv = (import.meta as ViteImportMeta).env!;
      console.log('- import.meta.env.VITE_APP_ENV:', viteEnv.VITE_APP_ENV);
      console.log('- import.meta.env.DEV:', viteEnv.DEV);
      console.log('- import.meta.env.PROD:', viteEnv.PROD);
    } else {
      console.log('- import.meta.env not available in current context');
    }
  } catch {
    console.log('- import.meta.env not available in current context');
  }

  // 7. –¢–µ—Å—Ç –ª–æ–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
  const testData = {
    environment,
    testTimestamp: new Date().toISOString(),
    configuredApiUrl: envConfig.apiUrl,
  };

  // Await all logging calls to ensure they complete before proceeding
  await Promise.all([
    logger.debug('Debug log with environment', testData),
    logger.info('Info log with environment', testData),
    logger.warn('Warning log with environment', testData),
    logger.error('Error log with environment', { ...testData, errorType: 'test-error' }),
  ]);

  console.log('‚úÖ Environment unified test completed');
  console.log('Check Yandex Cloud logs for environment field in jsonPayload');

  // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
  const finalStatus = logger.getStatus();
  if (finalStatus.isCloudLoggingDisabled) {
    console.log('');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('üîß –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Service Account Key (YANDEX_SERVICE_ACCOUNT_KEY)');
    console.log('2. –ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ IAM —Ç–æ–∫–µ–Ω (YANDEX_IAM_TOKEN)');
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ logger.forceEnableCloudLogging()');
  } else {
    console.log('‚úÖ –û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runEnvironmentTest().catch(console.error);
