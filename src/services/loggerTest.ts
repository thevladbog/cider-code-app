/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Yandex Cloud Logger
 *
 * –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:
 * 1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx ts-node src/services/loggerTest.ts
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from 'dotenv';
dotenv.config();

import { getLoggerConfig, validateLoggerConfig } from './loggerConfig';
import { logger } from './loggerService';

async function testLogger(): Promise<void> {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Cloud Logger...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = getLoggerConfig();
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞:');
    console.log(`  - –í–∫–ª—é—á–µ–Ω: ${config.enabled}`);
    console.log(`  - Folder ID: ${config.folderId}`);
    console.log(`  - Log Group ID: ${config.logGroupId}`);
    console.log(`  - IAM Token: ${config.iamToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`  - OAuth Token: ${config.oauthToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(
      `  - Service Account Key: ${config.serviceAccountKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`
    );

    if (!validateLoggerConfig(config)) {
      console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      return;
    }

    if (!config.enabled) {
      console.log('‚ÑπÔ∏è  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥.\n');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä...');
    await logger.initialize(config);
    console.log('‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');

    await logger.debug('–¢–µ—Å—Ç–æ–≤–æ–µ debug —Å–æ–æ–±—â–µ–Ω–∏–µ', {
      testData: 'debug_test',
      timestamp: new Date().toISOString(),
    });
    console.log('  ‚úÖ DEBUG –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    await logger.info('–¢–µ—Å—Ç–æ–≤–æ–µ info —Å–æ–æ–±—â–µ–Ω–∏–µ', {
      testData: 'info_test',
      timestamp: new Date().toISOString(),
    });
    console.log('  ‚úÖ INFO –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    await logger.warn('–¢–µ—Å—Ç–æ–≤–æ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ', {
      testData: 'warn_test',
      timestamp: new Date().toISOString(),
    });
    console.log('  ‚úÖ WARN –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    await logger.error('–¢–µ—Å—Ç–æ–≤–æ–µ error —Å–æ–æ–±—â–µ–Ω–∏–µ', {
      testData: 'error_test',
      timestamp: new Date().toISOString(),
    });
    console.log('  ‚úÖ ERROR –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');

    await logger.logAppEvent('test_app_event', {
      version: '1.0.0-test',
      environment: 'test',
    });
    console.log('  ‚úÖ App Event –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    await logger.logUserAction('test_user_action', {
      action: 'button_click',
      elementId: 'test_button',
    });
    console.log('  ‚úÖ User Action –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    await logger.logSystemEvent('test_system_event', {
      deviceType: 'scanner',
      status: 'connected',
    });
    console.log('  ‚úÖ System Event –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    const testError = new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
    await logger.logError(testError, {
      context: 'logger_test',
      severity: 'low',
    });
    console.log('  ‚úÖ Error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤...');

    await logger.logBatch([
      {
        level: 'INFO',
        message: '–ü–µ—Ä–≤—ã–π –ª–æ–≥ –≤ –ø–∞–∫–µ—Ç–µ',
        jsonPayload: { batchIndex: 1 },
      },
      {
        level: 'INFO',
        message: '–í—Ç–æ—Ä–æ–π –ª–æ–≥ –≤ –ø–∞–∫–µ—Ç–µ',
        jsonPayload: { batchIndex: 2 },
      },
      {
        level: 'WARN',
        message: '–¢—Ä–µ—Ç–∏–π –ª–æ–≥ –≤ –ø–∞–∫–µ—Ç–µ',
        jsonPayload: { batchIndex: 3 },
      },
    ]);
    console.log('  ‚úÖ –ü–∞–∫–µ—Ç –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ Yandex Cloud Logging:');
    console.log(
      `   https://console.cloud.yandex.ru/folders/${config.folderId}/logging/log-groups/${config.logGroupId}`
    );
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–≥–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testLogger()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testLogger };
