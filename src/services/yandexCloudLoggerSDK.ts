import { getExecutionContext } from '../utils/executionContext';
import { ServiceAccountKey, ServiceAccountKeyConfig, ServiceAccountKeyLoader } from './types';
import { YandexCloudLoggerDirectAPI } from './yandexCloudLoggerDirectAPI';

// Dynamic imports for Node.js-only modules to prevent browser bundling issues
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let YandexSDK: any = null;

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ metadata service –¥–ª—è Yandex Cloud SDK
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ª—é–±–æ–π —Ä–∞–±–æ—Ç–æ–π —Å SDK
function disableMetadataService() {
  // Google Cloud metadata service
  process.env.GOOGLE_APPLICATION_CREDENTIALS = '';
  process.env.GOOGLE_CLOUD_PROJECT = '';
  process.env.GCLOUD_PROJECT = '';

  // Yandex Cloud metadata service
  process.env.YC_METADATA_CREDENTIALS = 'false';
  process.env.DISABLE_YC_METADATA = 'true';
  process.env.YC_DISABLE_METADATA = 'true';

  // AWS metadata service (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
  process.env.AWS_EC2_METADATA_DISABLED = 'true';

  // –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è metadata
  process.env.METADATA_SERVICE_DISABLED = 'true';
  process.env.DISABLE_METADATA_SERVICE = 'true';

  console.log('üö´ Metadata service –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ metadata service
function blockMetadataRequests() {
  try {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Node.js http –º–æ–¥—É–ª—å
    const http = require('http');
    const https = require('https');
    const originalHttpRequest = http.request;
    const originalHttpsRequest = https.request;

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function interceptRequest(original: any) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return function (this: any, options: any, callback?: any) {
        const url = typeof options === 'string' ? options : options.hostname || options.host || '';

        if (
          url.includes('169.254.169.254') ||
          url.includes('metadata.google.internal') ||
          url.includes('metadata.yandexcloud.net')
        ) {
          console.error('üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù HTTP –∑–∞–ø—Ä–æ—Å –∫ metadata service:', url);
          const error = new Error(`BLOCKED: Metadata service access denied - ${url}`);
          if (callback) {
            process.nextTick(() => callback(error));
            return;
          }
          throw error;
        }

        return original.call(this, options, callback);
      };
    }

    http.request = interceptRequest(originalHttpRequest);
    https.request = interceptRequest(originalHttpsRequest);

    console.log('üö´ HTTP/HTTPS –∑–∞–ø—Ä–æ—Å—ã –∫ metadata service –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—Ç HTTP –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
disableMetadataService();
blockMetadataRequests();

// Function to dynamically load Yandex Cloud SDK
async function loadYandexSDK() {
  if (YandexSDK) return YandexSDK;

  try {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º metadata service –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π SDK
    disableMetadataService();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ metadata service
    const originalFetch = global.fetch;
    if (originalFetch) {
      global.fetch = function (url: string | URL | Request, init?: RequestInit) {
        const urlString = typeof url === 'string' ? url : url.toString();
        if (urlString.includes('169.254.169.254') || urlString.includes('metadata')) {
          console.error('üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –∑–∞–ø—Ä–æ—Å –∫ metadata service:', urlString);
          return Promise.reject(new Error('Metadata service disabled for security'));
        }
        return originalFetch(url, init);
      };
    }

    YandexSDK = await import('@yandex-cloud/nodejs-sdk');

    console.log('‚úÖ Yandex Cloud SDK –∑–∞–≥—Ä—É–∂–µ–Ω —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º metadata service');

    return YandexSDK;
  } catch (error) {
    throw new Error(`Failed to load Yandex Cloud SDK: ${(error as Error).message}`);
  }
}

// Helper function to get SDK components
async function getSDKComponents() {
  const sdk = await loadYandexSDK();
  const { Session, cloudApi, serviceClients } = sdk;
  const {
    logging: {
      log_ingestion_service: { WriteRequest },
      log_entry: { LogLevel_Level },
    },
  } = cloudApi;

  return { Session, cloudApi, serviceClients, WriteRequest, LogLevel_Level };
}

export interface YandexCloudLoggerSDKConfig {
  iamToken?: string;
  oauthToken?: string;
  serviceAccountKey?: ServiceAccountKey;
  // Enhanced security: load service account key from secure sources
  serviceAccountKeyConfig?: ServiceAccountKeyConfig;
  folderId: string;
  logGroupId: string;
  environment?: string; // –¢–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è: development, production, staging –∏ —Ç.–¥.
  resource?: {
    type: string;
    id: string;
  };
}

export interface LogMessage {
  level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL';
  message: string;
  timestamp?: Date;
  jsonPayload?: Record<string, unknown>;
  streamName?: string;
}

export enum LogLevel {
  LEVEL_UNSPECIFIED = 0,
  TRACE = 1,
  DEBUG = 2,
  INFO = 3,
  WARN = 4,
  ERROR = 5,
  FATAL = 6,
}

export class YandexCloudLoggerSDK {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private session: any; // Will be initialized as Session from SDK
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private logIngestionService: any; // Will be initialized as LogIngestionServiceClient from SDK
  private directAPI: YandexCloudLoggerDirectAPI | null = null; // Fallback to direct API
  private useFallbackAPI = false; // Flag to use direct API instead of SDK
  private config: Required<
    Omit<
      YandexCloudLoggerSDKConfig,
      'iamToken' | 'oauthToken' | 'serviceAccountKey' | 'serviceAccountKeyConfig'
    >
  > &
    Pick<
      YandexCloudLoggerSDKConfig,
      'iamToken' | 'oauthToken' | 'serviceAccountKey' | 'serviceAccountKeyConfig'
    >;
  private isInitialized = false;
  private initPromise: Promise<void> | null = null; // Shared promise for ongoing initialization
  private lastAuthError: Error | null = null;
  private authRetryCount = 0;
  private readonly maxAuthRetries = 3;
  private isCloudLoggingDisabled = false; // –§–ª–∞–≥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  private lastFailureTime: Date | null = null;
  private readonly cooldownPeriod = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  constructor(config: YandexCloudLoggerSDKConfig) {
    // Load service account key securely if config is provided
    let resolvedServiceAccountKey = config.serviceAccountKey;

    if (!resolvedServiceAccountKey && config.serviceAccountKeyConfig) {
      const loadedKey = ServiceAccountKeyLoader.loadSafely(config.serviceAccountKeyConfig);

      if (loadedKey && ServiceAccountKeyLoader.validate(loadedKey)) {
        resolvedServiceAccountKey = loadedKey;
      } else if (loadedKey) {
        console.error('Loaded service account key failed validation');
      }
    }

    // If no direct key provided, try loading from environment by default
    if (!resolvedServiceAccountKey && !config.iamToken && !config.oauthToken) {
      console.log(
        'No authentication provided, attempting to load service account key from environment...'
      );
      const envKey = ServiceAccountKeyLoader.loadSafely({});
      if (envKey) {
        resolvedServiceAccountKey = envKey;
      }
    }

    this.config = {
      iamToken: config.iamToken,
      oauthToken: config.oauthToken,
      serviceAccountKey: resolvedServiceAccountKey,
      serviceAccountKeyConfig: config.serviceAccountKeyConfig,
      folderId: config.folderId,
      logGroupId: config.logGroupId,
      environment: config.environment || 'production', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é production
      resource: config.resource || {
        type: 'bottle-code-app',
        id: 'electron-app',
      },
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é, –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ initialize()
    this.session = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Direct API –∫–∞–∫ fallback
    this.directAPI = new YandexCloudLoggerDirectAPI({
      iamToken: this.config.iamToken,
      serviceAccountKey: resolvedServiceAccountKey,
      folderId: this.config.folderId,
      logGroupId: this.config.logGroupId,
      resource: this.config.resource,
    });

    // –ü–†–û–ê–ö–¢–ò–í–ù–ê–Ø –ó–ê–©–ò–¢–ê: –í Electron-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º Direct API
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å metadata service
    const context = getExecutionContext();
    if (context.context === 'main' || context.context === 'renderer') {
      console.warn(
        'üîÑ –ü–†–û–ê–ö–¢–ò–í–ù–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï: –í Electron –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Direct API ' +
          '–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å metadata service'
      );
      this.useFallbackAPI = true;
    }

    // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Direct API –µ—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è metadata
    if (
      process.env.YC_METADATA_CREDENTIALS === 'false' ||
      process.env.DISABLE_YC_METADATA === 'true' ||
      process.env.GOOGLE_APPLICATION_CREDENTIALS === ''
    ) {
      console.warn(
        'üîÑ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ metadata service, ' +
          '–∏—Å–ø–æ–ª—å–∑—É–µ–º Direct API'
      );
      this.useFallbackAPI = true;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –æ–±–ª–∞–∫–æ
   */
  private canAttemptCloudLogging(): boolean {
    if (!this.isCloudLoggingDisabled) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ cooldown –ø–µ—Ä–∏–æ–¥
    if (this.lastFailureTime) {
      const timeSinceFailure = Date.now() - this.lastFailureTime.getTime();
      if (timeSinceFailure > this.cooldownPeriod) {
        console.log('Cooldown –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.');
        this.isCloudLoggingDisabled = false;
        this.lastFailureTime = null;
        this.authRetryCount = 0;
        this.lastAuthError = null;
        return true;
      }
    }

    return false;
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è cooldown
   */
  private disableCloudLoggingTemporarily(): void {
    this.isCloudLoggingDisabled = true;
    this.lastFailureTime = new Date();
    console.warn(
      `–û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${this.cooldownPeriod / 1000 / 60} –º–∏–Ω—É—Ç ` +
        '–∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.'
    );
    console.warn(
      'üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. ' +
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY.'
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async refreshAuthIfNeeded(): Promise<void> {
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Service Account Key, —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ SDK
    if (this.config.serviceAccountKey) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Service Account Key - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
      return;
    }

    // –î–ª—è IAM –∏ OAuth —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (this.lastAuthError) {
      if (this.authRetryCount >= this.maxAuthRetries) {
        throw new Error(
          `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (${this.maxAuthRetries}). ` +
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account Key –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. ' +
            '–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ' +
            this.lastAuthError.message
        );
      }

      console.log(
        `–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${this.authRetryCount + 1}/${this.maxAuthRetries}`
      );
      this.authRetryCount++;

      // –î–ª—è IAM —Ç–æ–∫–µ–Ω–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      if (this.config.iamToken) {
        console.warn(
          'IAM —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Service Account Key.'
        );
        console.warn(
          '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key (YANDEX_SERVICE_ACCOUNT_KEY) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Service Account Key –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envServiceAccountKey = process.env.YANDEX_SERVICE_ACCOUNT_KEY;
        if (envServiceAccountKey) {
          try {
            const serviceAccountKey = JSON.parse(envServiceAccountKey);
            console.log(
              '–ù–∞–π–¥–µ–Ω Service Account Key –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ...'
            );
            this.config.serviceAccountKey = serviceAccountKey;
            this.config.iamToken = undefined; // –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π IAM —Ç–æ–∫–µ–Ω
          } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YANDEX_SERVICE_ACCOUNT_KEY:', parseError);
          }
        }
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      this.isInitialized = false;
      this.initPromise = null; // Reset the initialization promise to allow re-initialization
      await this.initialize();
    }
  } /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   */
  private isAuthenticationError(error: unknown): boolean {
    if (!error) return false;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–π—Å—Ç–≤ –æ—à–∏–±–∫–∏
    const err = error as { message?: string; code?: string | number; toString?: () => string };
    const errorMessage = err.message || (err.toString ? err.toString() : String(error));

    return (
      errorMessage.includes('UNAUTHENTICATED') ||
      errorMessage.includes('expired') ||
      errorMessage.includes('Unauthorized') ||
      errorMessage.includes('Invalid token') ||
      err.code === 'UNAUTHENTICATED' ||
      err.code === 16 // gRPC UNAUTHENTICATED code
    );
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   */
  async initialize(): Promise<void> {
    // If initialization is already in progress, return the existing promise
    if (this.initPromise) {
      return this.initPromise;
    }

    // If already initialized, return immediately
    if (this.isInitialized) {
      return Promise.resolve();
    }

    // Create and store the initialization promise
    this.initPromise = this.performInitialization();

    try {
      await this.initPromise;
    } finally {
      // Clear the promise once initialization is complete (success or failure)
      this.initPromise = null;
    }
  }

  /**
   * Performs the actual initialization logic
   */
  private async performInitialization(): Promise<void> {
    try {
      // –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ Direct API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SDK
      if (this.useFallbackAPI) {
        console.log('‚úÖ Direct API —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SDK');
        this.isInitialized = true;
        this.lastAuthError = null;
        this.authRetryCount = 0;
        return;
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º metadata service –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
      disableMetadataService();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const context = getExecutionContext();
      console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Yandex Cloud Logger –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: ${context.description}`);

      // –í renderer –ø—Ä–æ—Ü–µ—Å—Å–µ Electron –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
      if (context.context === 'renderer' || context.context === 'browser') {
        console.log(
          'üîÑ Renderer/Browser –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É –±–µ–∑ metadata service'
        );

        if (!this.config.serviceAccountKey) {
          throw new Error(
            '–í renderer/browser –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è Service Account Key. ' +
              '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY.'
          );
        }

        // –í renderer –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º Yandex SDK –Ω–∞–ø—Ä—è–º—É—é
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —á–µ—Ä–µ–∑ IPC –∫ main –ø—Ä–æ—Ü–µ—Å—Å—É
        console.warn(
          '‚ö†Ô∏è –í renderer –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Yandex Cloud SDK –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ. ' +
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ IPC –∫ main –ø—Ä–æ—Ü–µ—Å—Å—É.'
        );

        // –°–æ–∑–¥–∞–µ–º mock session –¥–ª—è renderer –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        this.session = {
          client: () => ({
            write: async () => {
              console.log('üì® –õ–æ–≥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ IPC –∫ main –ø—Ä–æ—Ü–µ—Å—Å—É');
              // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ IPC
              return Promise.resolve();
            },
          }),
        };

        this.isInitialized = true;
        return;
      }

      // Load Yandex Cloud SDK dynamically (—Ç–æ–ª—å–∫–æ –¥–ª—è main/nodejs –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
      const sdk = await loadYandexSDK();
      const { Session, serviceClients } = sdk;

      // –°–æ–∑–¥–∞–µ–º session —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç metadata service
      let sessionConfig: Record<string, unknown> = {};

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
      if (this.config.iamToken) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å IAM —Ç–æ–∫–µ–Ω–æ–º...');
        sessionConfig.iamToken = this.config.iamToken;
      } else if (this.config.serviceAccountKey) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Service Account Key...');
        console.log('Service Account ID:', this.config.serviceAccountKey.service_account_id);
        console.log('Key ID:', this.config.serviceAccountKey.id);

        // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é Service Account Key –≤ SDK
        // –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º IAM —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é, –ø—É—Å—Ç—å SDK –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–∞–º
        sessionConfig.serviceAccountKey = this.config.serviceAccountKey;

        console.log('‚úÖ Service Account Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏');
      } else if (this.config.oauthToken) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å OAuth —Ç–æ–∫–µ–Ω–æ–º...');
        sessionConfig.oauthToken = this.config.oauthToken;
      } else {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å iamToken, oauthToken –∏–ª–∏ serviceAccountKey');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
      sessionConfig = {
        ...sessionConfig,
        endpoint: 'api.cloud.yandex.net:443',
        ssl: true,
        timeout: 30000,
      };

      console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏:', {
        hasIamToken: !!sessionConfig.iamToken,
        hasServiceAccountKey: !!sessionConfig.serviceAccountKey,
        hasOauthToken: !!sessionConfig.oauthToken,
        endpoint: sessionConfig.endpoint,
      });

      // –°–æ–∑–¥–∞–µ–º session —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç metadata service
      this.session = new Session(sessionConfig);

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Log Ingestion —Å –ø–æ–º–æ—â—å—é —Å–µ—Å—Å–∏–∏
      this.logIngestionService = this.session.client(serviceClients.LogIngestionServiceClient);

      this.isInitialized = true;
      this.lastAuthError = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.authRetryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

      console.log('‚úÖ Yandex Cloud Logger SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IAM —Ç–æ–∫–µ–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
      if (this.config.iamToken) {
        console.warn(
          '–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IAM —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. ' +
            '–î–ª—è production-–æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account Key.'
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex Cloud Logger SDK:', error);
      this.lastAuthError = error instanceof Error ? error : new Error(String(error));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å metadata service
      const errorMessage = error instanceof Error ? error.message : String(error);
      if (
        errorMessage.includes('169.254.169.254') ||
        errorMessage.includes('ECONNREFUSED') ||
        errorMessage.includes('metadata')
      ) {
        console.error(
          'üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SDK –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å metadata service –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∑–∞–ø—Ä–µ—Ç!'
        );
        console.warn('üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú–°–Ø –ù–ê DIRECT API –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å metadata service');

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Direct API
        this.useFallbackAPI = true;
        this.isInitialized = true;
        this.lastAuthError = null;
        this.authRetryCount = 0;

        console.log('‚úÖ Fallback –Ω–∞ Direct API –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return;
      }

      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ Yandex Cloud Logging
   */
  async log(logMessage: LogMessage): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ–±–ª–∞–∫–æ
    if (!this.canAttemptCloudLogging()) {
      // –ï—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log(`[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`, logMessage.jsonPayload);
      return;
    }

    if (!this.isInitialized) {
      console.warn('Logger –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      try {
        await this.initialize();
      } catch (initError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä:', initError);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
        console.log(
          `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
          logMessage.jsonPayload
        );
        return;
      }
    }

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback API (–∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å SDK)
    if (this.useFallbackAPI && this.directAPI) {
      try {
        console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ Direct API (fallback)...');

        await this.directAPI.log({
          timestamp: (logMessage.timestamp || new Date()).toISOString(),
          level: logMessage.level,
          message: logMessage.message,
          jsonPayload: {
            ...(logMessage.jsonPayload || {}),
            environment: this.config.environment,
            appVersion: process.env.npm_package_version || 'unknown',
            platform: process.platform,
            arch: process.arch,
          },
          streamName: logMessage.streamName || 'default',
        });

        console.log(
          `‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Direct API: ${logMessage.level} - ${logMessage.message}`
        );
        return;
      } catch (directAPIError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ Direct API:', directAPIError);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
        console.log(
          `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
          logMessage.jsonPayload
        );
        return;
      }
    }

    try {
      const timestamp = logMessage.timestamp || new Date();

      // Get SDK components dynamically
      const { WriteRequest } = await getSDKComponents();

      // –î–æ–±–∞–≤–ª—è–µ–º environment –≤ jsonPayload
      const enrichedPayload = {
        ...(logMessage.jsonPayload || {}),
        environment: this.config.environment,
        appVersion: process.env.npm_package_version || 'unknown',
        platform: process.platform,
        arch: process.arch,
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º entry —Å–æ–≥–ª–∞—Å–Ω–æ IncomingLogEntry API
      const entry = {
        timestamp: timestamp, // SDK –æ–∂–∏–¥–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç
        level: await this.mapLogLevel(logMessage.level),
        message: logMessage.message,
        jsonPayload: enrichedPayload,
        streamName: logMessage.streamName || 'default',
      };

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é WriteRequest.fromPartial
      const request = WriteRequest.fromPartial({
        destination: {
          logGroupId: this.config.logGroupId,
        },
        resource: this.config.resource,
        entries: [entry],
      });

      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ Yandex Cloud SDK...');

      await this.logIngestionService.write(request);

      console.log(
        `‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Yandex Cloud: ${logMessage.level} - ${logMessage.message} [${this.config.environment}]`
      );

      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      this.authRetryCount = 0;
      this.lastAuthError = null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Yandex Cloud —á–µ—Ä–µ–∑ SDK:', error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å metadata service
      const errorMessage = error instanceof Error ? error.message : String(error);
      if (
        errorMessage.includes('169.254.169.254') ||
        errorMessage.includes('metadata') ||
        errorMessage.includes('ENETUNREACH')
      ) {
        console.warn(
          'üîÑ SDK –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å metadata service. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Direct API...'
        );

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Direct API –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –±—É–¥—É—â–∏—Ö
        this.useFallbackAPI = true;

        try {
          await this.directAPI?.log({
            timestamp: (logMessage.timestamp || new Date()).toISOString(),
            level: logMessage.level,
            message: logMessage.message,
            jsonPayload: {
              ...(logMessage.jsonPayload || {}),
              environment: this.config.environment,
              appVersion: process.env.npm_package_version || 'unknown',
              platform: process.platform,
              arch: process.arch,
            },
            streamName: logMessage.streamName || 'default',
          });

          console.log(
            `‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Direct API (fallback): ${logMessage.level} - ${logMessage.message}`
          );
          return;
        } catch (directAPIError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ Direct API fallback:', directAPIError);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      if (this.isAuthenticationError(error)) {
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        try {
          this.lastAuthError = error instanceof Error ? error : new Error(String(error));
          await this.refreshAuthIfNeeded();

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
          await this.log(logMessage);
          return;
        } catch (authError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:', authError);

          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          if (this.authRetryCount >= this.maxAuthRetries) {
            this.disableCloudLoggingTemporarily();
          }

          console.error(
            '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key ' +
              '–≤–º–µ—Å—Ç–æ IAM —Ç–æ–∫–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY —Å JSON –∫–ª—é—á–æ–º.'
          );
        }
      }

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
      console.log(`[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`, logMessage.jsonPayload);
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Yandex Cloud SDK
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private async mapLogLevel(level: string): Promise<any> {
    const { LogLevel_Level } = await getSDKComponents();

    switch (level) {
      case 'DEBUG':
        return LogLevel_Level.DEBUG;
      case 'INFO':
        return LogLevel_Level.INFO;
      case 'WARN':
        return LogLevel_Level.WARN;
      case 'ERROR':
        return LogLevel_Level.ERROR;
      case 'FATAL':
        return LogLevel_Level.FATAL;
      default:
        return LogLevel_Level.INFO;
    }
  }

  /**
   * –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async debug(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'DEBUG', message, jsonPayload, streamName });
  }

  async info(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'INFO', message, jsonPayload, streamName });
  }

  async warn(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'WARN', message, jsonPayload, streamName });
  }

  async error(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'ERROR', message, jsonPayload, streamName });
  }

  async fatal(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'FATAL', message, jsonPayload, streamName });
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤
   */
  async logBatch(logMessages: LogMessage[]): Promise<void> {
    if (!this.isInitialized) {
      try {
        await this.initialize();
      } catch (initError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', initError);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
        logMessages.forEach(logMessage => {
          console.log(
            `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
            logMessage.jsonPayload
          );
        });
        return;
      }
    }

    try {
      // Get SDK components dynamically
      const { WriteRequest } = await getSDKComponents();

      const entries = await Promise.all(
        logMessages.map(async logMessage => {
          const timestamp = logMessage.timestamp || new Date();

          // –î–æ–±–∞–≤–ª—è–µ–º environment –≤ jsonPayload –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          const enrichedPayload = {
            ...(logMessage.jsonPayload || {}),
            environment: this.config.environment,
            appVersion: process.env.npm_package_version || 'unknown',
            platform: process.platform,
            arch: process.arch,
          };

          return {
            timestamp: timestamp, // SDK –æ–∂–∏–¥–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç
            level: await this.mapLogLevel(logMessage.level),
            message: logMessage.message,
            jsonPayload: enrichedPayload,
            streamName: logMessage.streamName || 'default',
          };
        })
      );

      const request = WriteRequest.fromPartial({
        destination: {
          logGroupId: this.config.logGroupId,
        },
        resource: this.config.resource,
        entries: entries,
      });

      console.log(
        `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ ${logMessages.length} –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Yandex Cloud SDK [${this.config.environment}]`
      );

      const response = await this.logIngestionService.write(request);

      console.log(
        `–ü–∞–∫–µ—Ç –∏–∑ ${logMessages.length} –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Yandex Cloud [${this.config.environment}]`
      );
      console.log('Response:', response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –ª–æ–≥–æ–≤ –≤ Yandex Cloud —á–µ—Ä–µ–∑ SDK:', error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      if (this.isAuthenticationError(error)) {
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        try {
          this.lastAuthError = error instanceof Error ? error : new Error(String(error));
          await this.refreshAuthIfNeeded();

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
          await this.logBatch(logMessages);
          return;
        } catch (authError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', authError);
          console.error(
            '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key ' +
              '–≤–º–µ—Å—Ç–æ IAM —Ç–æ–∫–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY —Å JSON –∫–ª—é—á–æ–º.'
          );
        }
      }

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
      logMessages.forEach(logMessage => {
        console.log(
          `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
          logMessage.jsonPayload
        );
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–≥–≥–µ—Ä–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  getStatus(): {
    isInitialized: boolean;
    isCloudLoggingDisabled: boolean;
    authRetryCount: number;
    lastFailureTime: Date | null;
    authMethod: string;
    canAttemptCloudLogging: boolean;
  } {
    let authMethod = 'not configured';
    if (this.config.serviceAccountKey) {
      authMethod = 'Service Account Key (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)';
    } else if (this.config.iamToken) {
      authMethod = 'IAM Token (–º–æ–∂–µ—Ç –∏—Å—Ç–µ–∫–∞—Ç—å)';
    } else if (this.config.oauthToken) {
      authMethod = 'OAuth Token';
    }

    return {
      isInitialized: this.isInitialized,
      isCloudLoggingDisabled: this.isCloudLoggingDisabled,
      authRetryCount: this.authRetryCount,
      lastFailureTime: this.lastFailureTime,
      authMethod,
      canAttemptCloudLogging: this.canAttemptCloudLogging(),
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–±—Ä–æ—Å cooldown)
   */
  forceEnableCloudLogging(): void {
    this.isCloudLoggingDisabled = false;
    this.lastFailureTime = null;
    this.authRetryCount = 0;
    this.lastAuthError = null;
    console.log('–û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ. Cooldown —Å–±—Ä–æ—à–µ–Ω.');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π environment
   */
  getEnvironment(): string {
    return this.config.environment;
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å environment (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã)
   */
  setEnvironment(environment: string): void {
    this.config.environment = environment;
    console.log(`Yandex Cloud Logger environment –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${environment}`);
  }
}
