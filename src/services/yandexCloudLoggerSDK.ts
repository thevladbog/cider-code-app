import { Session, cloudApi, serviceClients } from '@yandex-cloud/nodejs-sdk';
import { ServiceAccountKey, ServiceAccountKeyConfig, ServiceAccountKeyLoader } from './types';

const {
  logging: {
    log_ingestion_service: { WriteRequest },
    log_entry: { LogLevel_Level },
  },
} = cloudApi;

export interface YandexCloudLoggerSDKConfig {
  iamToken?: string;
  oauthToken?: string;
  serviceAccountKey?: ServiceAccountKey;
  // Enhanced security: load service account key from secure sources
  serviceAccountKeyConfig?: ServiceAccountKeyConfig;
  folderId: string;
  logGroupId: string;
  environment?: string; // –¢–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è: development, production, staging –∏ —Ç.–¥.
  resource?: {
    type: string;
    id: string;
  };
}

export interface LogMessage {
  level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'FATAL';
  message: string;
  timestamp?: Date;
  jsonPayload?: Record<string, unknown>;
  streamName?: string;
}

export enum LogLevel {
  LEVEL_UNSPECIFIED = 0,
  TRACE = 1,
  DEBUG = 2,
  INFO = 3,
  WARN = 4,
  ERROR = 5,
  FATAL = 6,
}

export class YandexCloudLoggerSDK {
  private session: Session;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private logIngestionService: any; // Will be initialized as LogIngestionServiceClient from SDK
  private config: Required<
    Omit<
      YandexCloudLoggerSDKConfig,
      'iamToken' | 'oauthToken' | 'serviceAccountKey' | 'serviceAccountKeyConfig'
    >
  > &
    Pick<
      YandexCloudLoggerSDKConfig,
      'iamToken' | 'oauthToken' | 'serviceAccountKey' | 'serviceAccountKeyConfig'
    >;
  private isInitialized = false;
  private lastAuthError: Error | null = null;
  private authRetryCount = 0;
  private readonly maxAuthRetries = 3;
  private isCloudLoggingDisabled = false; // –§–ª–∞–≥ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  private lastFailureTime: Date | null = null;
  private readonly cooldownPeriod = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  constructor(config: YandexCloudLoggerSDKConfig) {
    // Load service account key securely if config is provided
    let resolvedServiceAccountKey = config.serviceAccountKey;

    if (!resolvedServiceAccountKey && config.serviceAccountKeyConfig) {
      const loadedKey = ServiceAccountKeyLoader.loadSafely(config.serviceAccountKeyConfig);

      if (loadedKey && ServiceAccountKeyLoader.validate(loadedKey)) {
        resolvedServiceAccountKey = loadedKey;
      } else if (loadedKey) {
        console.error('Loaded service account key failed validation');
      }
    }

    // If no direct key provided, try loading from environment by default
    if (!resolvedServiceAccountKey && !config.iamToken && !config.oauthToken) {
      console.log(
        'No authentication provided, attempting to load service account key from environment...'
      );
      const envKey = ServiceAccountKeyLoader.loadSafely({});
      if (envKey) {
        resolvedServiceAccountKey = envKey;
      }
    }

    this.config = {
      iamToken: config.iamToken,
      oauthToken: config.oauthToken,
      serviceAccountKey: resolvedServiceAccountKey,
      serviceAccountKeyConfig: config.serviceAccountKeyConfig,
      folderId: config.folderId,
      logGroupId: config.logGroupId,
      environment: config.environment || 'production', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é production
      resource: config.resource || {
        type: 'bottle-code-app',
        id: 'electron-app',
      },
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é, –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ initialize()
    this.session = new Session();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –æ–±–ª–∞–∫–æ
   */
  private canAttemptCloudLogging(): boolean {
    if (!this.isCloudLoggingDisabled) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ cooldown –ø–µ—Ä–∏–æ–¥
    if (this.lastFailureTime) {
      const timeSinceFailure = Date.now() - this.lastFailureTime.getTime();
      if (timeSinceFailure > this.cooldownPeriod) {
        console.log('Cooldown –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫. –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.');
        this.isCloudLoggingDisabled = false;
        this.lastFailureTime = null;
        this.authRetryCount = 0;
        this.lastAuthError = null;
        return true;
      }
    }

    return false;
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è cooldown
   */
  private disableCloudLoggingTemporarily(): void {
    this.isCloudLoggingDisabled = true;
    this.lastFailureTime = new Date();
    console.warn(
      `–û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${this.cooldownPeriod / 1000 / 60} –º–∏–Ω—É—Ç ` +
        '–∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.'
    );
    console.warn(
      'üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. ' +
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY.'
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async refreshAuthIfNeeded(): Promise<void> {
    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Service Account Key, —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ SDK
    if (this.config.serviceAccountKey) {
      return;
    }

    // –î–ª—è IAM –∏ OAuth —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (this.lastAuthError) {
      if (this.authRetryCount >= this.maxAuthRetries) {
        throw new Error(
          `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (${this.maxAuthRetries}). ` +
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account Key –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. ' +
            '–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ' +
            this.lastAuthError.message
        );
      }

      console.log(
        `–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${this.authRetryCount + 1}/${this.maxAuthRetries}`
      );
      this.authRetryCount++;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      this.isInitialized = false;
      await this.initialize();
    }
  } /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   */
  private isAuthenticationError(error: unknown): boolean {
    if (!error) return false;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–π—Å—Ç–≤ –æ—à–∏–±–∫–∏
    const err = error as { message?: string; code?: string | number; toString?: () => string };
    const errorMessage = err.message || (err.toString ? err.toString() : String(error));

    return (
      errorMessage.includes('UNAUTHENTICATED') ||
      errorMessage.includes('expired') ||
      errorMessage.includes('Unauthorized') ||
      errorMessage.includes('Invalid token') ||
      err.code === 'UNAUTHENTICATED' ||
      err.code === 16 // gRPC UNAUTHENTICATED code
    );
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   */
  async initialize(): Promise<void> {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
      if (this.config.iamToken) {
        this.session = new Session({ iamToken: this.config.iamToken });
      } else if (this.config.serviceAccountKey) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º serviceAccountKey - TypeScript –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã–µ, –Ω–æ runtime –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.session = new Session({ serviceAccountKey: this.config.serviceAccountKey } as any);
      } else if (this.config.oauthToken) {
        this.session = new Session({ oauthToken: this.config.oauthToken });
      } else {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å iamToken, oauthToken –∏–ª–∏ serviceAccountKey');
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Log Ingestion —Å –ø–æ–º–æ—â—å—é —Å–µ—Å—Å–∏–∏
      this.logIngestionService = this.session.client(serviceClients.LogIngestionServiceClient);

      this.isInitialized = true;
      this.lastAuthError = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.authRetryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

      console.log('Yandex Cloud Logger SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IAM —Ç–æ–∫–µ–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
      if (this.config.iamToken) {
        console.warn(
          '–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IAM —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å—Ç–µ—á—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. ' +
            '–î–ª—è production-–æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Service Account Key.'
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex Cloud Logger SDK:', error);
      this.lastAuthError = error instanceof Error ? error : new Error(String(error));
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ Yandex Cloud Logging
   */
  async log(logMessage: LogMessage): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ–±–ª–∞–∫–æ
    if (!this.canAttemptCloudLogging()) {
      // –ï—Å–ª–∏ –æ–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log(`[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`, logMessage.jsonPayload);
      return;
    }

    if (!this.isInitialized) {
      console.warn('Logger –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      try {
        await this.initialize();
      } catch (initError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä:', initError);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
        console.log(
          `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
          logMessage.jsonPayload
        );
        return;
      }
    }

    try {
      const timestamp = logMessage.timestamp || new Date();

      // –î–æ–±–∞–≤–ª—è–µ–º environment –≤ jsonPayload
      const enrichedPayload = {
        ...(logMessage.jsonPayload || {}),
        environment: this.config.environment,
        appVersion: process.env.npm_package_version || 'unknown',
        platform: process.platform,
        arch: process.arch,
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º entry —Å–æ–≥–ª–∞—Å–Ω–æ IncomingLogEntry API
      const entry = {
        timestamp: timestamp, // SDK –æ–∂–∏–¥–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç
        level: this.mapLogLevel(logMessage.level),
        message: logMessage.message,
        jsonPayload: enrichedPayload,
        streamName: logMessage.streamName || 'default',
      };

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é WriteRequest.fromPartial
      const request = WriteRequest.fromPartial({
        destination: {
          logGroupId: this.config.logGroupId,
        },
        resource: this.config.resource,
        entries: [entry],
      });

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —á–µ—Ä–µ–∑ Yandex Cloud SDK:', JSON.stringify(request, null, 2));

      const response = await this.logIngestionService.write(request);

      console.log(
        `–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Yandex Cloud: ${logMessage.level} - ${logMessage.message} [${this.config.environment}]`
      );
      console.log('Response:', response);

      // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
      this.authRetryCount = 0;
      this.lastAuthError = null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Yandex Cloud —á–µ—Ä–µ–∑ SDK:', error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      if (this.isAuthenticationError(error)) {
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        try {
          this.lastAuthError = error instanceof Error ? error : new Error(String(error));
          await this.refreshAuthIfNeeded();

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
          await this.log(logMessage);
          return;
        } catch (authError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:', authError);

          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          if (this.authRetryCount >= this.maxAuthRetries) {
            this.disableCloudLoggingTemporarily();
          }

          console.error(
            '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key ' +
              '–≤–º–µ—Å—Ç–æ IAM —Ç–æ–∫–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY —Å JSON –∫–ª—é—á–æ–º.'
          );
        }
      }

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
      console.log(`[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`, logMessage.jsonPayload);
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Yandex Cloud SDK
   */
  private mapLogLevel(level: string): (typeof LogLevel_Level)[keyof typeof LogLevel_Level] {
    switch (level) {
      case 'DEBUG':
        return LogLevel_Level.DEBUG;
      case 'INFO':
        return LogLevel_Level.INFO;
      case 'WARN':
        return LogLevel_Level.WARN;
      case 'ERROR':
        return LogLevel_Level.ERROR;
      case 'FATAL':
        return LogLevel_Level.FATAL;
      default:
        return LogLevel_Level.INFO;
    }
  }

  /**
   * –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async debug(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'DEBUG', message, jsonPayload, streamName });
  }

  async info(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'INFO', message, jsonPayload, streamName });
  }

  async warn(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'WARN', message, jsonPayload, streamName });
  }

  async error(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'ERROR', message, jsonPayload, streamName });
  }

  async fatal(
    message: string,
    jsonPayload?: Record<string, unknown>,
    streamName?: string
  ): Promise<void> {
    await this.log({ level: 'FATAL', message, jsonPayload, streamName });
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤
   */
  async logBatch(logMessages: LogMessage[]): Promise<void> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const entries = logMessages.map(logMessage => {
        const timestamp = logMessage.timestamp || new Date();

        // –î–æ–±–∞–≤–ª—è–µ–º environment –≤ jsonPayload –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const enrichedPayload = {
          ...(logMessage.jsonPayload || {}),
          environment: this.config.environment,
          appVersion: process.env.npm_package_version || 'unknown',
          platform: process.platform,
          arch: process.arch,
        };

        return {
          timestamp: timestamp, // SDK –æ–∂–∏–¥–∞–µ—Ç Date –æ–±—ä–µ–∫—Ç
          level: this.mapLogLevel(logMessage.level),
          message: logMessage.message,
          jsonPayload: enrichedPayload,
          streamName: logMessage.streamName || 'default',
        };
      });

      const request = WriteRequest.fromPartial({
        destination: {
          logGroupId: this.config.logGroupId,
        },
        resource: this.config.resource,
        entries: entries,
      });

      console.log(
        `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ ${logMessages.length} –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Yandex Cloud SDK [${this.config.environment}]`
      );

      const response = await this.logIngestionService.write(request);

      console.log(
        `–ü–∞–∫–µ—Ç –∏–∑ ${logMessages.length} –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Yandex Cloud [${this.config.environment}]`
      );
      console.log('Response:', response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –ª–æ–≥–æ–≤ –≤ Yandex Cloud —á–µ—Ä–µ–∑ SDK:', error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      if (this.isAuthenticationError(error)) {
        console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        try {
          this.lastAuthError = error instanceof Error ? error : new Error(String(error));
          await this.refreshAuthIfNeeded();

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
          await this.logBatch(logMessages);
          return;
        } catch (authError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', authError);
          console.error(
            '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Account Key ' +
              '–≤–º–µ—Å—Ç–æ IAM —Ç–æ–∫–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY —Å JSON –∫–ª—é—á–æ–º.'
          );
        }
      }

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
      logMessages.forEach(logMessage => {
        console.log(
          `[LOCAL LOG] ${logMessage.level}: ${logMessage.message}`,
          logMessage.jsonPayload
        );
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–≥–≥–µ—Ä–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  getStatus(): {
    isInitialized: boolean;
    isCloudLoggingDisabled: boolean;
    authRetryCount: number;
    lastFailureTime: Date | null;
    authMethod: string;
    canAttemptCloudLogging: boolean;
  } {
    let authMethod = 'not configured';
    if (this.config.serviceAccountKey) {
      authMethod = 'Service Account Key (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)';
    } else if (this.config.iamToken) {
      authMethod = 'IAM Token (–º–æ–∂–µ—Ç –∏—Å—Ç–µ–∫–∞—Ç—å)';
    } else if (this.config.oauthToken) {
      authMethod = 'OAuth Token';
    }

    return {
      isInitialized: this.isInitialized,
      isCloudLoggingDisabled: this.isCloudLoggingDisabled,
      authRetryCount: this.authRetryCount,
      lastFailureTime: this.lastFailureTime,
      authMethod,
      canAttemptCloudLogging: this.canAttemptCloudLogging(),
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–±—Ä–æ—Å cooldown)
   */
  forceEnableCloudLogging(): void {
    this.isCloudLoggingDisabled = false;
    this.lastFailureTime = null;
    this.authRetryCount = 0;
    this.lastAuthError = null;
    console.log('–û–±–ª–∞—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ. Cooldown —Å–±—Ä–æ—à–µ–Ω.');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π environment
   */
  getEnvironment(): string {
    return this.config.environment;
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å environment (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã)
   */
  setEnvironment(environment: string): void {
    this.config.environment = environment;
    console.log(`Yandex Cloud Logger environment –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${environment}`);
  }
}
