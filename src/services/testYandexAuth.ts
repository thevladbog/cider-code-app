/**
 * Comprehensive test for Yandex Cloud authentication
 * This file tests the authentication in different contexts and ensures metadata service is never used
 */

import { getExecutionContext } from '../utils/executionContext';

// Mock HTTP requests to detect metadata service attempts
function setupMetadataDetection() {
  const originalFetch = global.fetch;
  let metadataAttempts = 0;

  // Override fetch to detect metadata service requests
  global.fetch = function (url: string | URL | Request, init?: RequestInit) {
    const urlString = typeof url === 'string' ? url : url.toString();

    if (urlString.includes('169.254.169.254') || urlString.includes('metadata.google.internal')) {
      metadataAttempts++;
      console.error(`üö´ DETECTED METADATA SERVICE REQUEST #${metadataAttempts}:`, urlString);
      console.error('üö´ Stack trace:', new Error().stack);

      // Reject with a specific error that matches what would happen in production
      return Promise.reject(
        new Error(`ECONNREFUSED: Connection refused to metadata service ${urlString}`)
      );
    }

    return originalFetch
      ? originalFetch(url, init)
      : Promise.reject(new Error('No fetch available'));
  };

  return {
    getMetadataAttempts: () => metadataAttempts,
    restore: () => {
      if (originalFetch) {
        global.fetch = originalFetch;
      }
    },
  };
}

// Test environment variables setup
function testEnvironmentSetup() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

  const requiredEnvVars = ['YANDEX_SERVICE_ACCOUNT_KEY', 'YANDEX_FOLDER_ID', 'YANDEX_LOG_GROUP_ID'];

  const metadataDisableVars = [
    'YC_METADATA_CREDENTIALS',
    'DISABLE_YC_METADATA',
    'YC_DISABLE_METADATA',
    'GOOGLE_APPLICATION_CREDENTIALS',
    'AWS_EC2_METADATA_DISABLED',
    'METADATA_SERVICE_DISABLED',
  ];

  console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
  for (const varName of requiredEnvVars) {
    const value = process.env[varName];
    if (value) {
      const displayValue = varName.includes('KEY') ? `[${value.length} —Å–∏–º–≤–æ–ª–æ–≤]` : value;
      console.log(`  ${varName}: ${displayValue}`);
    } else {
      console.error(`  ‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
    }
  }

  console.log('\nüö´ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è metadata service:');
  for (const varName of metadataDisableVars) {
    const value = process.env[varName];
    console.log(`  ${varName}: ${value || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
  }
}

// Test execution context
function testExecutionContext() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');

  const context = getExecutionContext();
  console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context.context}`);
  console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${context.description}`);
  console.log(`Node.js –º–æ–¥—É–ª–∏: ${context.canUseNodeModules ? '‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}`);

  // Additional context checks
  console.log(
    `process.type: ${(process as NodeJS.Process & { type?: string }).type || 'undefined'}`
  );
  console.log(`window: ${typeof window !== 'undefined' ? 'defined' : 'undefined'}`);
  console.log(`process.versions.electron: ${process.versions?.electron || 'undefined'}`);
  console.log(`process.versions.node: ${process.versions?.node || 'undefined'}`);
}

// Test Yandex Cloud Logger initialization
async function testYandexCloudLogger() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Cloud Logger...');

  const metadataDetector = setupMetadataDetection();

  try {
    // Import logger dynamically to avoid issues in different contexts
    const { YandexCloudLoggerSDK } = await import('./yandexCloudLoggerSDK');

    const config = {
      folderId: process.env.YANDEX_FOLDER_ID || 'test-folder',
      logGroupId: process.env.YANDEX_LOG_GROUP_ID || 'test-log-group',
      environment: 'test',
    };

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞...');
    const logger = new YandexCloudLoggerSDK(config);

    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞...');
    await logger.initialize();

    console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞...');
    await logger.log({
      level: 'INFO',
      message: 'Test log from authentication test',
      jsonPayload: {
        test: true,
        timestamp: new Date().toISOString(),
        context: getExecutionContext().context,
      },
    });

    console.log('‚úÖ –õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–æ–≥');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–≥–µ—Ä–∞:', error);

    // Analyze the error
    const errorMessage = error instanceof Error ? error.message : String(error);

    if (errorMessage.includes('169.254.169.254') || errorMessage.includes('ECONNREFUSED')) {
      console.error('üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: SDK –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ metadata service!');
      console.error('üîß –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞—à–∏ –º–µ—Ä—ã –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é metadata service –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
    } else if (errorMessage.includes('YANDEX_SERVICE_ACCOUNT_KEY')) {
      console.error('üîß –†–ï–®–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_SERVICE_ACCOUNT_KEY');
    } else if (errorMessage.includes('UNAUTHENTICATED')) {
      console.error('üîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Service Account Key');
    } else {
      console.error('üîß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }

    throw error;
  } finally {
    const attempts = metadataDetector.getMetadataAttempts();
    if (attempts > 0) {
      console.error(`üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–û ${attempts} –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ metadata service!`);
    } else {
      console.log('‚úÖ –ü–æ–ø—ã—Ç–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ metadata service –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }

    metadataDetector.restore();
  }
}

// Main test function
export async function runAuthenticationTests() {
  console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò YANDEX CLOUD');
  console.log('='.repeat(60));

  try {
    testEnvironmentSetup();
    testExecutionContext();
    await testYandexCloudLogger();

    console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ Metadata service –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } catch (error) {
    console.error('\n‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–û–ô');
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  runAuthenticationTests().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}
