import { Button, Text, Spin, Card } from '@gravity-ui/uikit';
import React, { useEffect, useState } from 'react';

import styles from './BackupViewer.module.scss';
import { formatBackupTimestamp, groupBackupItemsByType } from '@/app/utils';
import { useBackup } from '@/app/hooks';

interface BackupViewerProps {
  shiftId: string;
}

export const BackupViewer: React.FC<BackupViewerProps> = ({ shiftId }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'products' | 'packages'>('products');

  const { loadBackupCodes, exportBackup, backupCodes } = useBackup({ shiftId });

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–¥—ã –ø–æ —Ç–∏–ø—É
  const { products, packages } = groupBackupItemsByType(backupCodes);

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      await loadBackupCodes();
      setIsLoading(false);
    };

    loadData();
  }, [loadBackupCodes]);

  const handleExport = async () => {
    const success = await exportBackup();
    if (success) {
      alert('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    } else {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
    }
  };

  return (
    <div className={styles.backupViewer}>
      <div className={styles.backupHeader}>
        <Text variant="subheader-1">–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</Text>

        <Button
          view="outlined"
          onClick={handleExport}
          disabled={isLoading || backupCodes.length === 0}
        >
          –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        </Button>
      </div>

      {isLoading ? (
        <div className={styles.loadingState}>
          <Spin size="l" />
          <Text variant="body-1" style={{ marginTop: '16px' }}>
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
          </Text>
        </div>
      ) : backupCodes.length === 0 ? (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üìÇ</div>
          <Text variant="subheader-1">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</Text>
          <Text variant="body-1">–î–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö.</Text>
        </div>
      ) : (
        <>
          <div className={styles.tabsContainer}>
            <div
              className={`${styles.tab} ${activeTab === 'products' ? styles.activeTab : ''}`}
              onClick={() => setActiveTab('products')}
            >
              <Text variant="body-1">–ü—Ä–æ–¥—É–∫—Ü–∏—è ({products.length})</Text>
            </div>
            <div
              className={`${styles.tab} ${activeTab === 'packages' ? styles.activeTab : ''}`}
              onClick={() => setActiveTab('packages')}
            >
              <Text variant="body-1">–£–ø–∞–∫–æ–≤–∫–∏ ({packages.length})</Text>
            </div>
          </div>

          {activeTab === 'products' && (
            <Card className={styles.backupTable}>
              <div className={styles.backupTableHeader}>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–ö–æ–¥</Text>
                </div>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–í—Ä–µ–º—è</Text>
                </div>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</Text>
                </div>
              </div>

              <div className={styles.backupTableBody}>
                {products.length === 0 ? (
                  <div className={styles.noData}>
                    <Text variant="body-1">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</Text>
                  </div>
                ) : (
                  products.map((item, index) => (
                    <div key={index} className={styles.backupTableRow}>
                      <div className={styles.backupTableCell}>
                        <Text variant="body-1">{item.code}</Text>
                      </div>
                      <div className={styles.backupTableCell}>
                        <Text variant="body-1">{formatBackupTimestamp(item.timestamp)}</Text>
                      </div>
                      <div className={styles.backupTableCell}>
                        <Button
                          view="flat"
                          size="s"
                          onClick={() => alert(JSON.stringify(item.additionalData, null, 2))}
                        >
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </Button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </Card>
          )}

          {activeTab === 'packages' && (
            <Card className={styles.backupTable}>
              <div className={styles.backupTableHeader}>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">SSCC</Text>
                </div>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–í—Ä–µ–º—è</Text>
                </div>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–ö–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü</Text>
                </div>
                <div className={styles.backupTableCell}>
                  <Text variant="body-2">–î–µ–π—Å—Ç–≤–∏—è</Text>
                </div>
              </div>

              <div className={styles.backupTableBody}>
                {packages.length === 0 ? (
                  <div className={styles.noData}>
                    <Text variant="body-1">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ø–∞–∫–æ–≤–∫–∞—Ö</Text>
                  </div>
                ) : (
                  packages.map((item, index) => (
                    <div key={index} className={styles.backupTableRow}>
                      <div className={styles.backupTableCell}>
                        <Text variant="body-1">{item.code}</Text>
                      </div>
                      <div className={styles.backupTableCell}>
                        <Text variant="body-1">{formatBackupTimestamp(item.timestamp)}</Text>
                      </div>
                      <div className={styles.backupTableCell}>
                        <Text variant="body-1">{item.additionalData?.items?.length || 0}</Text>
                      </div>
                      <div className={styles.backupTableCell}>
                        <Button
                          view="flat"
                          size="s"
                          onClick={() => alert(JSON.stringify(item.additionalData, null, 2))}
                        >
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </Button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </Card>
          )}
        </>
      )}
    </div>
  );
};
