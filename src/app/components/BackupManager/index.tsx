import { Button, Card, Text } from '@gravity-ui/uikit';
import React, { useEffect, useState } from 'react';

import BackupViewerNew from '../BackupViewer/BackupViewerNew';

import styles from './BackupManager.module.scss';

interface BackupFile {
  date: string;
  shifts: {
    shiftId: string;
    hasGeneralLog: boolean;
    hasSuccessfulScans: boolean;
    generalLogSize?: number;
    successfulScansSize?: number;
    modifiedDate?: Date;
  }[];
}

const BackupManager: React.FC = () => {
  const [backupFiles, setBackupFiles] = useState<BackupFile[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedShift, setSelectedShift] = useState<{ date: string; shiftId: string } | null>(
    null
  );

  useEffect(() => {
    loadBackupFiles();
  }, []);

  const loadBackupFiles = async () => {
    setIsLoading(true);
    try {
      const files = await window.electronAPI.getAllBackupFiles();
      setBackupFiles(files);
    } catch (error) {
      console.error('Error loading backup files:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleExportShift = async (date: string, shiftId: string) => {
    try {
      const result = await window.electronAPI.exportBackup(shiftId);
      if (result.success) {
        alert(`–ë—ç–∫–∞–ø —Å–º–µ–Ω—ã ${shiftId} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
      } else {
        alert(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${result.error}`);
      }
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
    }
  };

  const handleDeleteShift = async (date: string, shiftId: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø —Å–º–µ–Ω—ã ${shiftId}?`)) {
      return;
    }

    try {
      const result = await window.electronAPI.deleteBackup(shiftId);
      if (result.success) {
        alert(`–ë—ç–∫–∞–ø —Å–º–µ–Ω—ã ${shiftId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
        loadBackupFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${result.error}`);
      }
    } catch (error) {
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
    }
  };

  const formatFileSize = (bytes?: number): string => {
    if (!bytes) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    if (bytes === 0) return '0 –ë';
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateStr: string): string => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  };

  if (isLoading) {
    return (
      <Card className={styles.container}>
        <div className={styles.loading}>
          <Text variant="body-1">–ó–∞–≥—Ä—É–∑–∫–∞ –±—ç–∫–∞–ø–æ–≤...</Text>
        </div>
      </Card>
    );
  }

  return (
    <Card className={styles.container}>
      <div className={styles.header}>
        <Text variant="display-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏</Text>
        <Button view="action" onClick={loadBackupFiles}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      {backupFiles.length === 0 ? (
        <div className={styles.emptyState}>
          <Text variant="body-1">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤</Text>
        </div>
      ) : (
        <div className={styles.backupList}>
          {backupFiles.map(backupFile => (
            <div key={backupFile.date} className={styles.dateGroup}>
              <div className={styles.dateHeader}>
                <Text variant="subheader-1">üìÖ {formatDate(backupFile.date)}</Text>
                <Text variant="body-2">
                  {backupFile.shifts.length} —Å–º–µ–Ω
                  {backupFile.shifts.length === 1 ? '–∞' : backupFile.shifts.length < 5 ? '—ã' : ''}
                </Text>
              </div>

              <div className={styles.shiftsList}>
                {backupFile.shifts.map(shift => (
                  <div key={shift.shiftId} className={styles.shiftItem}>
                    <div className={styles.shiftInfo}>
                      <div className={styles.shiftHeader}>
                        <Text variant="body-1">
                          <strong>–°–º–µ–Ω–∞: {shift.shiftId}</strong>
                        </Text>
                        {shift.modifiedDate && (
                          <Text variant="body-2" className={styles.modifiedDate}>
                            –ò–∑–º–µ–Ω–µ–Ω–æ: {shift.modifiedDate.toLocaleString('ru-RU')}
                          </Text>
                        )}
                      </div>

                      <div className={styles.shiftDetails}>
                        <div className={styles.fileInfo}>
                          <span className={shift.hasGeneralLog ? styles.hasFile : styles.noFile}>
                            üìã –û–±—â–∏–π –ª–æ–≥
                          </span>
                          {shift.hasGeneralLog && (
                            <span className={styles.fileSize}>
                              ({formatFileSize(shift.generalLogSize)})
                            </span>
                          )}
                        </div>

                        <div className={styles.fileInfo}>
                          <span
                            className={shift.hasSuccessfulScans ? styles.hasFile : styles.noFile}
                          >
                            ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                          </span>
                          {shift.hasSuccessfulScans && (
                            <span className={styles.fileSize}>
                              ({formatFileSize(shift.successfulScansSize)})
                            </span>
                          )}
                        </div>
                      </div>
                    </div>

                    <div className={styles.shiftActions}>
                      <Button
                        view="outlined"
                        size="s"
                        onClick={() =>
                          setSelectedShift({ date: backupFile.date, shiftId: shift.shiftId })
                        }
                      >
                        üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                      </Button>
                      <Button
                        view="outlined"
                        size="s"
                        onClick={() => handleExportShift(backupFile.date, shift.shiftId)}
                      >
                        üì§ –≠–∫—Å–ø–æ—Ä—Ç
                      </Button>
                      <Button
                        view="outlined"
                        size="s"
                        onClick={() => handleDeleteShift(backupFile.date, shift.shiftId)}
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—ç–∫–∞–ø–∞ */}
      {selectedShift && (
        <div className={styles.backupViewerModal}>
          <div className={styles.backupViewerOverlay} onClick={() => setSelectedShift(null)} />
          <div className={styles.backupViewerContent}>
            <BackupViewerNew
              shiftId={selectedShift.shiftId}
              onClose={() => setSelectedShift(null)}
            />
          </div>
        </div>
      )}
    </Card>
  );
};

export default BackupManager;
