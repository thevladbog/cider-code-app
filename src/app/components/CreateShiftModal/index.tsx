import { Modal, Text, Button, Spin } from '@gravity-ui/uikit';
import React, { useEffect, useState } from 'react';

import styles from './CreateShiftModal.module.scss';
import { useCreateShift } from '@/app/api/queries';


interface CreateShiftModalProps {
  visible: boolean;
  onClose: () => void;
  onCreated: (shiftId: string) => void;
}

export const CreateShiftModal: React.FC<CreateShiftModalProps> = ({
  visible,
  onClose,
  onCreated,
}) => {
  const [scannedBarcode, setScannedBarcode] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const { mutate: createShift, isPending, error, data } = useCreateShift();

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (visible) {
      setScannedBarcode(null);
      setErrorMessage(null);
    }
  }, [visible]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
  useEffect(() => {
    if (!visible) return;

    const unsubscribe = window.electronAPI.onBarcodeScanned(barcode => {
      console.log('Scanned product barcode:', barcode);
      setScannedBarcode(barcode);
      setErrorMessage(null);
    });

    return () => {
      unsubscribe();
    };
  }, [visible]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã
  useEffect(() => {
    if (data && data.id) {
      onCreated(data.id);
    }
  }, [data, onCreated]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç API
  useEffect(() => {
    if (error) {
      const errorMsg =
        error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ–Ω—ã';
      setErrorMessage(errorMsg);
    }
  }, [error]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã
  const handleCreateShift = () => {
    if (!scannedBarcode) {
      setErrorMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏');
      return;
    }

    createShift(scannedBarcode);
  };

  return (
    <Modal open={visible} onClose={onClose} aria-labelledby="create-shift-modal-title">
      <div className={styles.createShiftModal}>
        <div className={styles.title}>
          <Text variant="display-2" id="create-shift-modal-title">
            –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
          </Text>
        </div>

        {isPending ? (
          <div className={styles.loadingContainer}>
            <Spin size="l" />
            <Text variant="body-1" style={{ marginTop: '16px' }}>
              –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã...
            </Text>
          </div>
        ) : scannedBarcode ? (
          <div className={styles.barcodeResult}>
            <div className={styles.barcodeValue}>
              <Text variant="display-3">{scannedBarcode}</Text>
            </div>
            <div className={styles.barcodeDescription}>
              <Text variant="body-1">
                `–®—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ &#34–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É&#34 –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`
              </Text>
            </div>
          </div>
        ) : (
          <div className={styles.scanInstructions}>
            <div className={styles.scanIcon}>üì∑</div>
            <div className={styles.scanText}>
              <Text variant="subheader-1">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏</Text>
            </div>
            <Text variant="body-1" style={{ textAlign: 'center' }}>
              –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é
              –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
            </Text>
          </div>
        )}

        {errorMessage && (
          <div className={styles.errorMessage}>
            <Text variant="body-1">{errorMessage}</Text>
          </div>
        )}

        <div className={styles.actions}>
          <Button view="flat" onClick={onClose} disabled={isPending}>
            –û—Ç–º–µ–Ω–∞
          </Button>

          {scannedBarcode && (
            <Button
              view="action"
              onClick={handleCreateShift}
              disabled={isPending}
              loading={isPending}
            >
              –°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É
            </Button>
          )}
        </div>
      </div>
    </Modal>
  );
};
