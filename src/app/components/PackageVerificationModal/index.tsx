import { Button, Modal, Spin, Text } from '@gravity-ui/uikit';
import React, { useCallback, useEffect, useRef, useState } from 'react';

import { verifySSCCCode } from '@/app/services/packagingService';
import { IShiftScheme } from '@/app/types';
import { formatSSCC, isDev } from '@/app/utils';
import { rendererLogger } from '@/app/utils/rendererLogger';
import styles from './PackageVerificationModal.module.scss';

interface PackageVerificationModalProps {
  visible: boolean;
  onClose: () => void;
  onVerified: () => void;
  sscc: string;
  productCount: number;
  shift: IShiftScheme;
  isLoading?: boolean;
}

export const PackageVerificationModal: React.FC<PackageVerificationModalProps> = ({
  visible,
  onClose,
  onVerified,
  sscc,
  productCount,
  shift,
  isLoading = false,
}) => {
  if (isDev()) {
    rendererLogger.debug('PackageVerificationModal: DEV mode active');
    rendererLogger.debug('PackageVerificationModal: visible state', { visible });
  }

  const [scannedCode, setScannedCode] = useState<string | null>(null);
  const [verificationResult, setVerificationResult] = useState<boolean | null>(null);
  const [, setErrorMessage] = useState<string | null>(null);
  const [verifyingCode, setVerifyingCode] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ useEffect
  const verifyingRef = useRef(false);

  // Extract complex expression to a variable for dependency array
  const operatorId = shift.operatorId ?? undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (visible) {
      setScannedCode(null);
      setVerificationResult(null);
      setErrorMessage(null);
      setVerifyingCode(false);
      verifyingRef.current = false;
    }
  }, [visible]); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º useCallback
  const handleBarcodeScan = useCallback(
    async (barcode: string) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (verifyingRef.current) return;
      console.log('üîç SSCC barcode scanned:', barcode);
      setScannedCode(barcode);
      setVerifyingCode(true);
      verifyingRef.current = true;

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–º—É
        console.log('üîç Verifying SSCC code...');
        const isValid = await verifySSCCCode(shift.id, barcode, sscc, operatorId);
        console.log('üîç Verification result:', isValid);
        setVerificationResult(isValid);
        if (isValid) {
          console.log('‚úÖ SSCC verification successful');

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            onVerified();
          }, 1500);
        } else {
          setErrorMessage('–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SSCC –∫–æ–¥—É —É–ø–∞–∫–æ–≤–∫–∏');
        }
      } catch (error) {
        console.error('Error verifying SSCC:', error);
        setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        setVerificationResult(false);
      } finally {
        setVerifyingCode(false);
        verifyingRef.current = false;
      }
    },
    [shift.id, sscc, operatorId, onVerified]
  ); // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!visible) return;

    const unsubscribe = window.electronAPI.onBarcodeScanned(handleBarcodeScan);

    return () => {
      unsubscribe();
    };
  }, [visible, handleBarcodeScan]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleResetScan = useCallback(() => {
    setScannedCode(null);
    setVerificationResult(null);
    setErrorMessage(null);
    setVerifyingCode(false);
    verifyingRef.current = false;
  }, []);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  };

  return (
    <Modal open={visible} onClose={onClose} aria-labelledby="package-verification-modal-title">
      <div className={styles.packageVerificationModal}>
        <div className={styles.title}>
          <Text variant="display-2" id="package-verification-modal-title">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏
          </Text>
        </div>

        {isLoading ? (
          <div className={styles.loadingContainer}>
            <Spin size="l" />
            <Text variant="body-1" style={{ marginTop: '16px' }}>
              –ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏...
            </Text>
          </div>
        ) : verifyingCode ? (
          <div className={styles.loadingContainer}>
            <Spin size="l" />
            <Text variant="body-1" style={{ marginTop: '16px' }}>
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...
            </Text>
          </div>
        ) : (
          <>
            <div className={styles.subheader}>
              <Text variant="body-1" color="secondary">
                –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Å —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏
              </Text>
            </div>
            <div className={styles.packageInfo}>
              <div className={styles.packageInfoHeader}>
                <Text variant="subheader-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø–∞–∫–æ–≤–∫–µ</Text>
              </div>

              <div className={styles.packageCode}>{formatSSCC(sscc)}</div>

              <div className={styles.packageDetails}>
                <div className={styles.packageDetail}>
                  <Text variant="caption-1">–¢–æ–≤–∞—Ä</Text>
                  <Text variant="body-1" className={styles.detailValue}>
                    {shift.product.fullName}
                  </Text>
                </div>

                <div className={styles.packageDetail}>
                  <Text variant="caption-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</Text>
                  <Text variant="body-1" className={styles.detailValue}>
                    {productCount} —à—Ç.
                  </Text>
                </div>

                <div className={styles.packageDetail}>
                  <Text variant="caption-1">–î–∞—Ç–∞</Text>
                  <Text variant="body-1" className={styles.detailValue}>
                    {formatDate(new Date())}
                  </Text>
                </div>
              </div>
            </div>
            {!scannedCode ? (
              <div className={styles.scanInstructions}>
                <div className={styles.scanIcon}>üì∑</div>
                <div className={styles.scanText}>
                  <Text variant="subheader-1">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ SSCC –∫–æ–¥ —Å —ç—Ç–∏–∫–µ—Ç–∫–∏ —É–ø–∞–∫–æ–≤–∫–∏</Text>
                </div>
                <Text variant="body-1" style={{ textAlign: 'center' }}>
                  –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Å —ç—Ç–∏–∫–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã
                  —Ä–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
                </Text>
              </div>
            ) : (
              <div
                className={`${styles.scanResult} ${
                  verificationResult ? styles.scanResultSuccess : styles.scanResultError
                }`}
              >
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <div style={{ fontSize: '24px' }}>{verificationResult ? '‚úÖ' : '‚ùå'}</div>
                  <Text variant="subheader-1">
                    {verificationResult ? '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!' : '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'}
                  </Text>
                </div>

                <Text variant="body-1" style={{ marginTop: '8px' }}>
                  {verificationResult
                    ? '–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SSCC –∫–æ–¥—É —É–ø–∞–∫–æ–≤–∫–∏. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.'
                    : '–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SSCC –∫–æ–¥—É —É–ø–∞–∫–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∏–∫–µ—Ç–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.'}
                </Text>

                {!verificationResult && (
                  <div style={{ marginTop: '8px' }}>
                    <Text variant="body-2">–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥: {sscc}</Text>
                    <Text variant="body-2">–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scannedCode}</Text>
                  </div>
                )}
              </div>
            )}{' '}
            <div className={styles.actions}>
              <Button view="flat" onClick={onClose}>
                –û—Ç–º–µ–Ω–∞
              </Button>{' '}
              {!verificationResult && scannedCode && (
                <Button view="action" onClick={handleResetScan}>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                </Button>
              )}
            </div>
          </>
        )}
      </div>
    </Modal>
  );
};
