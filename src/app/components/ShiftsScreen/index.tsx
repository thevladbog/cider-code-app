import { ArrowLeft, ArrowRotateLeft, Eye, Plus } from '@gravity-ui/icons';
import { Button, Spin, Tab, TabList, Text } from '@gravity-ui/uikit';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { useLogout, useShifts } from '../../api/queries';
import { ShiftStatus } from '../../types';
import { AppHeader } from '../AppHeader';
import { CreateShiftModal } from '../CreateShiftModal';
import { ShiftCard } from '../ShiftCard';
import styles from './ShiftsScreen.module.scss';

interface TabsItem {
  id: string;
  title: string;
}

// –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ç–∞–±–æ–≤
const filterOptions: TabsItem[] = [
  { id: 'all', title: '–í—Å–µ' },
  { id: ShiftStatus.PLANNED, title: '–ê–∫—Ç–∏–≤–Ω—ã–µ' },
  { id: ShiftStatus.INPROGRESS, title: '–í —Ä–∞–±–æ—Ç–µ' },
  { id: ShiftStatus.DONE, title: '–ê—Ä—Ö–∏–≤–Ω—ã–µ' },
  { id: ShiftStatus.CANCELED, title: '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ' },
];

export const ShiftsScreen: React.FC = () => {
  const navigate = useNavigate();
  const [filter, setFilter] = useState<string>('all');
  const [createModalVisible, setCreateModalVisible] = useState(false);

  const { data: shifts, isLoading, error, refetch } = useShifts();
  const logout = useLogout();

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–º–µ–Ω –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const filteredShifts = shifts
    ? filter === 'all'
      ? shifts.result
      : shifts.result.filter(shift => shift.status === filter)
    : [];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Å–º–µ–Ω—ã
  const handleShiftClick = (shiftId: string) => {
    navigate(`/shifts/${shiftId}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã
  const handleShiftCreated = (shiftId: string) => {
    setCreateModalVisible(false);
    navigate(`/shifts/${shiftId}`);
  };
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleLogout = () => {
    logout.mutate(undefined, {
      onSuccess: () => {
        navigate('/');
      },
    });
  };
  return (
    <div className={styles.shiftsScreen}>
      <AppHeader />
      <div className={styles.content}>
        <div className={styles.header}>
          <div className={styles.title}>
            <Text variant="display-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</Text>
          </div>
          <div className={styles.headerActions}>
            <Button
              view="outlined"
              size="l"
              onClick={handleLogout}
              loading={logout.isPending}
              className={styles.buttonWithIcon}
            >
              <ArrowLeft />
              –í—ã–π—Ç–∏
            </Button>
            <Button
              view="action"
              size="l"
              onClick={() => setCreateModalVisible(true)}
              className={styles.buttonWithIcon}
            >
              <Plus />
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É
            </Button>
          </div>
        </div>
        <div className={styles.gridContainer}>
          <div className={styles.gridHeader}>
            <div className={styles.filters}>
              <TabList size="m" value={filter} onUpdate={tabId => setFilter(tabId)}>
                {filterOptions.map(item => {
                  return (
                    <Tab key={item.id} value={item.id}>
                      {item.title}
                    </Tab>
                  );
                })}
              </TabList>
            </div>

            <Text variant="body-2" color="secondary">
              {filteredShifts.length > 0
                ? `–ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: ${filteredShifts.length}`
                : '–ù–µ—Ç —Å–º–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
            </Text>
          </div>
          {isLoading ? (
            <div className={styles.loader}>
              <Spin size="l" />
            </div>
          ) : error ? (
            <div className={styles.errorContainer}>
              <div className={styles.errorHeader}>
                <Text variant="subheader-1">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω</Text>
              </div>
              <Text variant="body-1">
                –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
              </Text>{' '}
              <Button
                view="flat"
                onClick={() => refetch()}
                className={`${styles.retryButton} ${styles.buttonWithIcon}`}
              >
                <ArrowRotateLeft />
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
              </Button>
            </div>
          ) : filteredShifts.length > 0 ? (
            <div className={styles.shiftsGrid}>
              {filteredShifts.map(shift => (
                <ShiftCard key={shift.id} shift={shift} onClick={handleShiftClick} />
              ))}
            </div>
          ) : (
            <div className={styles.noShifts}>
              <div className={styles.noShiftsIcon}>üì¶</div>
              <Text variant="subheader-1">–ù–µ—Ç —Å–º–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Text>
              <Text variant="body-1" style={{ marginTop: '8px' }}>
                {filter === 'all'
                  ? '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'
                  : `–ù–µ—Ç —Å–º–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${filterOptions.find(item => item.id === filter)?.title}"`}
              </Text>{' '}
              {filter !== 'all' && (
                <Button
                  view="flat"
                  onClick={() => setFilter('all')}
                  style={{ marginTop: '16px' }}
                  className={styles.buttonWithIcon}
                >
                  <Eye />
                  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã
                </Button>
              )}
            </div>
          )}{' '}
        </div>
        <CreateShiftModal
          visible={createModalVisible}
          onClose={() => setCreateModalVisible(false)}
          onCreated={handleShiftCreated}
        />
      </div>
    </div>
  );
};
