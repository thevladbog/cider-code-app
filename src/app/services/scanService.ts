import { DataMatrixData, IShiftScheme } from '../types';
import { createDataMatrixKey, isMatchingGtin, parseDataMatrix } from '../utils/datamatrix';

// –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Å–º–µ–Ω—ã
interface ScanHistory {
  [shiftId: string]: {
    [codeKey: string]: {
      timestamp: number;
      data: DataMatrixData;
    };
  };
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
const scanHistoryCache: ScanHistory = {};

// –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
const voiceMessages = {
  duplicateScan: '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
  invalidProduct: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
  success: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
  invalidFormat: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞',
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Datamatrix –∫–æ–¥
 *
 * @param code - –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
 * @param shift - –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞
 * @returns –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function checkDataMatrixCode(
  code: string,
  shift: IShiftScheme
): {
  isValid: boolean;
  isDuplicate: boolean;
  isCorrectProduct: boolean;
  data: DataMatrixData | null;
  message?: string;
} {
  // –ü–∞—Ä—Å–∏–º Datamatrix –∫–æ–¥
  const parsedData = parseDataMatrix(code);

  // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π
  if (!parsedData) {
    // –í—ã–∑—ã–≤–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    notifyInvalidFormat();

    return {
      isValid: false,
      isDuplicate: false,
      isCorrectProduct: false,
      data: null,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Datamatrix –∫–æ–¥–∞',
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GTIN –ø—Ä–æ–¥—É–∫—Ç—É —Å–º–µ–Ω—ã
  const isCorrectProduct = isMatchingGtin(parsedData.gtin, shift.product.gtin);

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–¥–∞
  const codeKey = createDataMatrixKey(parsedData);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
  const shiftScans = scanHistoryCache[shift.id] || {};
  const isDuplicate = codeKey in shiftScans;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!scanHistoryCache[shift.id]) {
    scanHistoryCache[shift.id] = {};
  }

  scanHistoryCache[shift.id][codeKey] = {
    timestamp: Date.now(),
    data: parsedData,
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
  let message;
  if (isDuplicate) {
    message = '–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω';
    // –í—ã–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –∏ –∑–≤—É–∫–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ
    notifyDuplicateScan();
  } else if (!isCorrectProduct) {
    message = '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ';
    // –í—ã–∑—ã–≤–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
    notifyInvalidProduct();
  } else {
    message = '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω';
    // –í—ã–∑—ã–≤–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    notifySuccessfulScan();
  }

  return {
    isValid: true,
    isDuplicate,
    isCorrectProduct,
    data: parsedData,
    message,
  };
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–º–µ–Ω—ã
 *
 * @param shiftId - ID —Å–º–µ–Ω—ã
 */
export function clearScanHistory(shiftId: string): void {
  delete scanHistoryCache[shiftId];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã
 *
 * @param shiftId - ID —Å–º–µ–Ω—ã
 * @returns –ú–∞—Å—Å–∏–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
 */
export function getScannedCodes(shiftId: string): DataMatrixData[] {
  const shiftScans = scanHistoryCache[shiftId] || {};
  return Object.values(shiftScans).map(item => item.data);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã
 *
 * @param shiftId - ID —Å–º–µ–Ω—ã
 * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
 */
export function getUniqueScannedCount(shiftId: string): number {
  const shiftScans = scanHistoryCache[shiftId] || {};
  return Object.keys(shiftScans).length;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ä–∞–º–∫–∞—Ö —Å–º–µ–Ω—ã
 *
 * @param shiftId - ID —Å–º–µ–Ω—ã
 * @param code - Datamatrix –∫–æ–¥ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
 * @returns true –µ—Å–ª–∏ –∫–æ–¥ —É–∂–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è
 */
export function isCodeAlreadyScanned(shiftId: string, code: string | DataMatrixData): boolean {
  const shiftScans = scanHistoryCache[shiftId] || {};

  if (typeof code === 'string') {
    const parsedData = parseDataMatrix(code);
    if (!parsedData) return false;

    const codeKey = createDataMatrixKey(parsedData);
    return codeKey in shiftScans;
  } else {
    const codeKey = createDataMatrixKey(code);
    return codeKey in shiftScans;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã
 *
 * @param shiftId - ID —Å–º–µ–Ω—ã
 * @param codesToRemove - –ú–∞—Å—Å–∏–≤ –∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
export function removeCodesFromHistory(shiftId: string, codesToRemove: DataMatrixData[]): void {
  const shiftScans = scanHistoryCache[shiftId];
  if (!shiftScans) return;

  for (const codeData of codesToRemove) {
    const codeKey = createDataMatrixKey(codeData);
    delete shiftScans[codeKey];
  }

  console.log(`üóëÔ∏è Removed ${codesToRemove.length} codes from scan history for shift ${shiftId}`);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏ –∑–≤—É–∫–æ–≤—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

/**
 * –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
function notifyDuplicateScan(): void {
  flashScreen('red');
  speakMessage(voiceMessages.duplicateScan);
}

/**
 * –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
 */
function notifyInvalidProduct(): void {
  flashScreen('orange');
  speakMessage(voiceMessages.invalidProduct);
}

/**
 * –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
function notifyInvalidFormat(): void {
  flashScreen('red');
  speakMessage(voiceMessages.invalidFormat);
}

/**
 * –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
function notifySuccessfulScan(): void {
  flashScreen('green');
  // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–¥–ª—è—Ç—å —Ä–∞–±–æ—Ç—É
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ—Ä–≥–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
 *
 * @param color - –¶–≤–µ—Ç –≤—Å–ø—ã—à–∫–∏ ('red', 'green', 'orange')
 * @param times - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–ø—ã—à–µ–∫
 */
function flashScreen(color: 'red' | 'green' | 'orange', times = 2): void {
  // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –≤—Å–ø—ã—à–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  let flashOverlay = document.getElementById('flash-overlay');
  if (!flashOverlay) {
    flashOverlay = document.createElement('div');
    flashOverlay.id = 'flash-overlay';
    flashOverlay.style.position = 'fixed';
    flashOverlay.style.top = '0';
    flashOverlay.style.left = '0';
    flashOverlay.style.width = '100%';
    flashOverlay.style.height = '100%';
    flashOverlay.style.pointerEvents = 'none';
    flashOverlay.style.zIndex = '9999';
    flashOverlay.style.opacity = '0';
    flashOverlay.style.transition = 'opacity 0.15s ease-in-out';
    document.body.appendChild(flashOverlay);
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤—Å–ø—ã—à–∫–∏
  let bgColor;
  switch (color) {
    case 'red':
      bgColor = 'rgba(220, 38, 38, 0.3)';
      break;
    case 'green':
      bgColor = 'rgba(22, 163, 74, 0.3)';
      break;
    case 'orange':
      bgColor = 'rgba(234, 88, 12, 0.3)';
      break;
  }
  flashOverlay.style.backgroundColor = bgColor;

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –º–∏–≥–∞–Ω–∏—è
  let currentFlash = 0;

  function doFlash() {
    if (currentFlash >= times * 2) return;

    if (flashOverlay) {
      if (currentFlash % 2 === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø—ã—à–∫—É
        flashOverlay.style.opacity = '1';
      } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø—ã—à–∫—É
        flashOverlay.style.opacity = '0';
      }
    }

    currentFlash++;
    setTimeout(doFlash, 150);
  }

  doFlash();
}

/**
 * –ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 *
 * @param message - –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
 */
function speakMessage(message: string): void {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SpeechSynthesis
  if ('speechSynthesis' in window) {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
    window.speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(message);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.0;
    utterance.pitch = 1.0;
    utterance.volume = 1.0;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–µ–Ω—Å–∫–∏–π
    window.speechSynthesis.onvoiceschanged = () => {
      const voices = window.speechSynthesis.getVoices();
      const russianVoice =
        voices.find(voice => voice.lang.includes('ru') && voice.name.includes('Female')) ||
        voices.find(voice => voice.lang.includes('ru'));

      if (russianVoice) {
        utterance.voice = russianVoice;
      }
    };

    window.speechSynthesis.speak(utterance);
  } else {
    console.warn('SpeechSynthesis –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ Electron
    const electronWindow = window as { electronAPI?: { playSound: (sound: string) => void } };
    if ('electronAPI' in electronWindow && electronWindow.electronAPI) {
      electronWindow.electronAPI.playSound('voice_' + message.toLowerCase().replace(/\s+/g, '_'));
    }
  }
}
