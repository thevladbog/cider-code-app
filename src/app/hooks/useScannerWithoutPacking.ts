import { useCallback, useEffect, useRef, useState } from 'react';

import { CodesService } from '../api/generated';
import { checkDataMatrixCode, clearScanHistory, getScannedCodes } from '../services/scanService';
import { DataMatrixData, IShiftScheme } from '../types';
import { useBackup } from './useBackup';

interface UseScannerWithoutPackingOptions {
  shift: IShiftScheme | null;
  onScanSuccess?: (data: DataMatrixData) => void;
  onScanError?: (message: string) => void;
  onDuplicateScan?: (data: DataMatrixData) => void;
  onInvalidProduct?: (data: DataMatrixData) => void;
  onBatchSent?: (codes: string[], count: number) => void;
  enabled?: boolean;
  batchSize?: number; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
  autoSendDelay?: number; // –ó–∞–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
}

interface UseScannerWithoutPackingResult {
  lastScannedCode: DataMatrixData | null;
  scannedCodes: DataMatrixData[];
  scanMessage: string | null;
  scanError: boolean;
  pendingCodes: string[]; // –ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  isProcessing: boolean; // –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  autoSendCountdown: number; // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  resetScan: () => void;
  clearHistory: () => void;
  sendPendingCodes: () => Promise<void>; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
}

/**
 * –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏ –≤ –∫–æ—Ä–æ–±—ã
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥—ã —á–µ—Ä–µ–∑ API /code/update-status
 */
export function useScannerWithoutPacking({
  shift,
  onScanSuccess,
  onScanError,
  onDuplicateScan,
  onInvalidProduct,
  onBatchSent,
  enabled = true,
  batchSize = 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–¥ —Å—Ä–∞–∑—É
  autoSendDelay = 10, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
}: UseScannerWithoutPackingOptions): UseScannerWithoutPackingResult {
  const [lastScannedCode, setLastScannedCode] = useState<DataMatrixData | null>(null);
  const [scanMessage, setScanMessage] = useState<string | null>(null);
  const [scanError, setScanError] = useState<boolean>(false);
  const [pendingCodes, setPendingCodes] = useState<string[]>([]);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [autoSendCountdown, setAutoSendCountdown] = useState<number>(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–æ–º
  const {
    checkCodeUniqueness,
    backupProduct,
    logAction,
    addProductToProductOnlyFile,
    addProductCodeToSuccessfulScans,
  } = useBackup({
    shiftId: shift?.id || '',
  });

  // –†–µ—Ñ—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const autoSendTimerRef = useRef<NodeJS.Timeout | null>(null);
  const countdownTimerRef = useRef<NodeJS.Timeout | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
  const getScanned = useCallback(() => {
    if (!shift?.id) return [];
    return getScannedCodes(shift.id);
  }, [shift?.id]);

  const [scannedCodes, setScannedCodes] = useState<DataMatrixData[]>(getScanned());

  // –†–µ—Ñ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const processingRef = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const sendCodesToServer = useCallback(
    async (codes: string[]) => {
      if (!shift?.id || codes.length === 0 || processingRef.current) {
        return;
      }

      processingRef.current = true;
      setIsProcessing(true);

      try {
        console.log(`Sending ${codes.length} codes to server:`, codes);

        await CodesService.codeControllerUpdateCodesStatus({
          requestBody: {
            codes: codes,
            shiftId: shift.id,
            productId: shift.product?.id,
          },
        });

        console.log(`üì§ Successfully sent ${codes.length} codes to server`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤ –≤ –±—ç–∫–∞–ø–µ (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
        console.log('üìù Updating backup status for sent codes...');
        for (const code of codes) {
          try {
            await backupProduct(code, {
              action: 'scan_without_packaging_sent',
              timestamp: Date.now(),
              shiftId: shift.id,
              status: 'sent', // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            });
          } catch (backupError) {
            console.error('Error updating backup status for code:', code, backupError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
          }
        }

        // –£–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –∏–∑ pending
        setPendingCodes(prev => prev.filter(code => !codes.includes(code)));

        onBatchSent?.(codes, codes.length);

        setScanMessage(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${codes.length} –∫–æ–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
        setScanError(false);
      } catch (error) {
        console.error('Error sending codes to server:', error);
        setScanMessage(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤: ${error}`);
        setScanError(true);
        throw error;
      } finally {
        processingRef.current = false;
        setIsProcessing(false);
      }
    },
    [shift, onBatchSent, backupProduct]
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Ç–∞–π–º–µ—Ä–æ–º
  const startAutoSendTimer = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    if (autoSendTimerRef.current) {
      clearTimeout(autoSendTimerRef.current);
    }
    if (countdownTimerRef.current) {
      clearInterval(countdownTimerRef.current);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    setAutoSendCountdown(autoSendDelay);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    countdownTimerRef.current = setInterval(() => {
      setAutoSendCountdown(prev => {
        if (prev <= 1) {
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    autoSendTimerRef.current = setTimeout(() => {
      if (pendingCodes.length > 0) {
        sendCodesToServer([...pendingCodes]).catch(console.error);
      }
      setAutoSendCountdown(0);
    }, autoSendDelay * 1000);
  }, [autoSendDelay, pendingCodes, sendCodesToServer]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  const stopAutoSendTimer = useCallback(() => {
    if (autoSendTimerRef.current) {
      clearTimeout(autoSendTimerRef.current);
      autoSendTimerRef.current = null;
    }
    if (countdownTimerRef.current) {
      clearInterval(countdownTimerRef.current);
      countdownTimerRef.current = null;
    }
    setAutoSendCountdown(0);
  }, []);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
  const sendPendingCodes = useCallback(async () => {
    if (pendingCodes.length > 0) {
      stopAutoSendTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä
      await sendCodesToServer([...pendingCodes]);
    }
  }, [pendingCodes, sendCodesToServer, stopAutoSendTimer]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleBarcodeScan = useCallback(
    async (barcode: string) => {
      if (!shift || !enabled) return;

      console.log('üîç Scanning barcode without packaging:', barcode, 'for shift:', shift.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      const checkResult = checkDataMatrixCode(barcode, shift);

      // –ï—Å–ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π –∏ –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –±—ç–∫–∞–ø
      let isDuplicateInBackup = false;
      if (
        checkResult.isValid &&
        checkResult.isCorrectProduct &&
        !checkResult.isDuplicate &&
        checkResult.data
      ) {
        try {
          const uniquenessResult = await checkCodeUniqueness(checkResult.data.rawData);
          isDuplicateInBackup = uniquenessResult.isDuplicate;

          if (isDuplicateInBackup) {
            console.log('Code found in backup, marking as duplicate');
            setScanMessage('–ö–æ–¥ —É–∂–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π —Å–º–µ–Ω–µ (–Ω–∞–π–¥–µ–Ω –≤ –±—ç–∫–∞–ø–µ)');
            setScanError(true);
          }
        } catch (error) {
          console.error('Error checking code uniqueness:', error);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
        }
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—à–µ)
      if (!isDuplicateInBackup) {
        setScanMessage(checkResult.message || null);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
      setScanError(
        !checkResult.isValid ||
          !checkResult.isCorrectProduct ||
          checkResult.isDuplicate ||
          isDuplicateInBackup
      );

      if (checkResult.data) {
        setLastScannedCode(checkResult.data);

        if (checkResult.isDuplicate || isDuplicateInBackup) {
          onDuplicateScan?.(checkResult.data);
        } else if (!checkResult.isCorrectProduct) {
          onInvalidProduct?.(checkResult.data);
        } else if (checkResult.isValid) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
          setScannedCodes(getScanned());
          onScanSuccess?.(checkResult.data);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±—ç–∫–∞–ø —Å—Ä–∞–∑—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
          const rawCode = checkResult.data.rawData;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
          if (!rawCode || rawCode.trim() === '') {
            console.error('‚ùå Cannot backup empty code');
            return;
          }

          console.log('üíæ Starting backup process for code:', rawCode);

          try {
            await backupProduct(rawCode, {
              action: 'scan_without_packaging',
              timestamp: Date.now(),
              shiftId: shift.id,
              status: 'scanned', // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            await logAction(rawCode, 'scanned_without_packaging', {
              timestamp: Date.now(),
              shiftId: shift.id,
              productId: shift.product?.id,
            }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–æ–¥–æ–≤ –±–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏
            await addProductToProductOnlyFile(rawCode);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª successful_scans.txt
            await addProductCodeToSuccessfulScans(rawCode);

            console.log('‚úÖ Code backed up successfully:', rawCode);
          } catch (backupError) {
            console.error('‚ùå Error backing up code after scan:', rawCode, backupError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –±—ç–∫–∞–ø –Ω–µ —É–¥–∞–ª—Å—è
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ pending —Å–ø–∏—Å–æ–∫
          setPendingCodes(prev => [...prev, rawCode]);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞—Ç—á
          const newPendingCount = pendingCodes.length + 1;
          if (newPendingCount >= batchSize) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            const codesToSend = [...pendingCodes, rawCode];
            try {
              stopAutoSendTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
              await sendCodesToServer(codesToSend);
            } catch (error) {
              console.error('Failed to send batch:', error);
              // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ pending –∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            }
          } else {
            // –ï—Å–ª–∏ –±–∞—Ç—á –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            startAutoSendTimer();
            setScanMessage(`–ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ${autoSendDelay} —Å–µ–∫.`);
          }
        }
      } else if (!checkResult.isValid) {
        onScanError?.(checkResult.message || '–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    },
    [
      shift,
      enabled,
      getScanned,
      onScanSuccess,
      onScanError,
      onDuplicateScan,
      onInvalidProduct,
      pendingCodes,
      batchSize,
      sendCodesToServer,
      startAutoSendTimer,
      stopAutoSendTimer,
      autoSendDelay,
      checkCodeUniqueness,
      backupProduct,
      logAction,
      addProductToProductOnlyFile,
      addProductCodeToSuccessfulScans,
    ]
  );

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!enabled || !window.electronAPI?.onBarcodeScanned) return;

    const unsubscribe = window.electronAPI.onBarcodeScanned(handleBarcodeScan);
    return unsubscribe;
  }, [enabled, handleBarcodeScan]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ pending –∫–æ–¥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (!enabled && pendingCodes.length > 0) {
      sendPendingCodes().catch(console.error);
    }
  }, [enabled, pendingCodes.length, sendPendingCodes]);

  // Cleanup —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      stopAutoSendTimer();
    };
  }, [stopAutoSendTimer]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const resetScan = useCallback(() => {
    setLastScannedCode(null);
    setScanMessage(null);
    setScanError(false);
    stopAutoSendTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
  }, [stopAutoSendTimer]);

  // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
  const clearHistory = useCallback(() => {
    if (shift) {
      clearScanHistory(shift.id);
      setScannedCodes([]);
      setPendingCodes([]);
      stopAutoSendTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
    }
  }, [shift, stopAutoSendTimer]);

  return {
    lastScannedCode,
    scannedCodes,
    scanMessage,
    scanError,
    pendingCodes,
    isProcessing,
    autoSendCountdown,
    resetScan,
    clearHistory,
    sendPendingCodes,
  };
}
