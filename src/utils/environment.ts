/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é environment —á–µ—Ä–µ–∑ VITE_APP_ENV
 */
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import type { LoggerService } from '../services/loggerService';

// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º console, –Ω–æ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ logger
let loggerInstance: {
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
} = console;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ—Å–ª–µ –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export function setLogger(logger: LoggerService): void {
  loggerInstance = logger;
}

export type AppEnvironment = 'development' | 'testing' | 'staging' | 'beta' | 'production';

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏:
 * 1. VITE_APP_ENV (–¥–ª—è Vite frontend)
 * 2. NODE_ENV (–¥–ª—è Node.js backend/Electron)
 * 3. APP_ENVIRONMENT (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
 * 4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 'production'
 */
export function getAppEnvironment(): AppEnvironment {
  // –í Electron main process –∏—Å–ø–æ–ª—å–∑—É–µ–º process.env
  if (typeof process !== 'undefined' && process.env) {
    const viteEnv = process.env.VITE_APP_ENV;
    const nodeEnv = process.env.NODE_ENV;
    const appEnv = process.env.APP_ENVIRONMENT;

    const env = viteEnv || nodeEnv || appEnv || 'production';
    return normalizeEnvironment(env);
  }

  // –í renderer process (Vite) –∏—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env
  if (typeof window !== 'undefined' && 'import' in globalThis) {
    try {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const meta = (globalThis as any).import?.meta;
      if (meta && meta.env) {
        const viteEnv = meta.env.VITE_APP_ENV;
        const dev = meta.env.DEV;
        const prod = meta.env.PROD;

        if (viteEnv) return normalizeEnvironment(viteEnv);
        if (dev) return 'development';
        if (prod) return 'production';
      }
    } catch (error) {
      loggerInstance.warn('Error accessing import.meta.env:', error);
    }
  }

  // Fallback
  return 'production';
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è environment –∫ –≤–∞–ª–∏–¥–Ω—ã–º —Ç–∏–ø–∞–º
 */
function normalizeEnvironment(env: string): AppEnvironment {
  const normalized = env.toLowerCase().trim();

  switch (normalized) {
    case 'dev':
    case 'development':
    case 'local':
      return 'development';
    case 'test':
    case 'testing':
      return 'testing';
    case 'stage':
    case 'staging':
      return 'staging';
    case 'beta':
      return 'beta';
    case 'prod':
    case 'production':
      return 'production';
    default:
      loggerInstance.warn(`Unknown environment: ${env}, defaulting to production`);
      return 'production';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–º
 */
export function isProduction(): boolean {
  return getAppEnvironment() === 'production';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π
 */
export function isDevelopment(): boolean {
  return getAppEnvironment() === 'development';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º
 */
export function isTesting(): boolean {
  return getAppEnvironment() === 'testing';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getEnvironmentConfig() {
  const env = getAppEnvironment();

  return {
    environment: env,
    isProduction: env === 'production',
    isDevelopment: env === 'development',
    isTesting: env === 'testing',
    isStaging: env === 'staging',
    isBeta: env === 'beta',

    // API URLs
    apiUrl: getApiUrl(env),

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    enableDetailedLogging: env === 'development' || env === 'testing',
    enableCloudLogging: env === 'production' || env === 'staging' || env === 'beta',

    // –û—Ç–ª–∞–¥–∫–∞
    enableDebugMode: env === 'development',
    showConsoleInProduction: false,
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å URL API –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function getApiUrl(env: AppEnvironment): string {
  switch (env) {
    case 'development':
      return 'https://api.test.in.bottlecode.app:3035';
    case 'testing':
      return 'https://api.test.in.bottlecode.app:3035';
    case 'staging':
    case 'beta':
      return 'https://beta.api.bottlecode.app';
    case 'production':
    default:
      return 'https://api.bottlecode.app';
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
 */
export function logEnvironmentInfo(): void {
  const config = getEnvironmentConfig();

  loggerInstance.info('üåç Environment Configuration', {
    environment: config.environment,
    apiUrl: config.apiUrl,
    enableCloudLogging: config.enableCloudLogging,
    enableDetailedLogging: config.enableDetailedLogging,
    enableDebugMode: config.enableDebugMode,
  });
}
